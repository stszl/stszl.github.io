<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端工程化</title>
      <link href="/2019/06/15/webengineering/"/>
      <url>/2019/06/15/webengineering/</url>
      
        <content type="html"><![CDATA[<h2 id="1-模块化的分类"><a href="#1-模块化的分类" class="headerlink" title="1.模块化的分类"></a>1.模块化的分类</h2><h3 id="1-1-模块化概述"><a href="#1-1-模块化概述" class="headerlink" title="1.1 模块化概述"></a>1.1 模块化概述</h3><p>传统开发模式的主要问题<br>① 命名冲突<br>② 文件依赖</p><p>通过模块化解决上述问题</p><ul><li><strong>模块化</strong>就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成<br>员，也可以依赖别的模块</li><li>模块化开发的好处：方便代码的重用，从而提升开发效率，并且方便后期的维护</li></ul><h3 id="1-2-浏览器端的模块化"><a href="#1-2-浏览器端的模块化" class="headerlink" title="1.2 浏览器端的模块化"></a>1.2 浏览器端的模块化</h3><p>1).AMD(Asynchronous Module Definition,异步模块定义)<br>代表产品为：Require.js<br>2).CMD(Common Module Definition,通用模块定义)<br>代表产品为：Sea.js</p><h3 id="1-3-服务器端模块化规范"><a href="#1-3-服务器端模块化规范" class="headerlink" title="1.3 服务器端模块化规范"></a>1.3 服务器端模块化规范</h3><p>服务器端的模块化规范是使用CommonJS规范：<br>① 模块分为 <code>单文件模块</code> 与 <code>包</code>,一个文件就是一个模块，都拥有独立的作用域<br>② 模块成员导出： <code>module.exports</code> 和 <code>exports</code><br>③ 模块成员导入： <code>require('模块标识符')</code></p><h3 id="1-4-大一统的模块化规范-–-ES6模块化"><a href="#1-4-大一统的模块化规范-–-ES6模块化" class="headerlink" title="1.4 大一统的模块化规范 – ES6模块化"></a>1.4 大一统的模块化规范 – ES6模块化</h3><p>在 ES6 模块化规范诞生之前， Javascript 社区已经尝试并提出了 AMD、 CMD、 CommonJS 等模块化规范。</p><p>但是，这些社区提出的模块化标准，还是存在一定的差异性与局限性、 并不是浏览器与服务器通用的模块化标准，例如：</p><ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li>CommonJS 适用于服务器端的 Javascript 模块化<br>因此， ES6 语法规范中，在语言层面上定义了 ES6 模块化规范，是浏览器端与服务器端通用的模块化开发规范。</li></ul><p>ES6模块化规范中定义：</p><ul><li>每个js文件都是一个独立的模块</li><li>导入模块成员使用 import 关键字</li><li>暴露模块成员使用 export 关键字</li></ul><p><strong>小结</strong>：推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。<br>        ES6模块化是浏览器端和服务器端通用的规范.</p><h3 id="1-5-Node-js-中通过-babel-体验-ES6-模块化"><a href="#1-5-Node-js-中通过-babel-体验-ES6-模块化" class="headerlink" title="1.5 Node.js 中通过 babel 体验 ES6 模块化"></a>1.5 Node.js 中通过 babel 体验 ES6 模块化</h3><p>① npm install –save-dev @babel/core @babel/cli @babel/preset-env @babel/node<br>② npm install –save @babel/polyfill<br>③ 项目跟目录创建文件 babel.config.js<br>④ babel.config.js 文件内容如右侧代码<br>⑤ 通过 npx babel-node index.js 执行代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"@babel/env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>      edge<span class="token punctuation">:</span> <span class="token string">"17"</span><span class="token punctuation">,</span>      firefox<span class="token punctuation">:</span> <span class="token string">"60"</span><span class="token punctuation">,</span>      chrome<span class="token punctuation">:</span> <span class="token string">"67"</span><span class="token punctuation">,</span>      safari<span class="token punctuation">:</span> <span class="token string">"11.1"</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> presets <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="1-6-ES6-模块化的基本语法"><a href="#1-6-ES6-模块化的基本语法" class="headerlink" title="1.6 ES6 模块化的基本语法"></a>1.6 ES6 模块化的基本语法</h3><h4 id="1-6-1-默认导出-与-默认导入"><a href="#1-6-1-默认导出-与-默认导入" class="headerlink" title="1.6.1 默认导出 与 默认导入"></a>1.6.1 默认导出 与 默认导入</h4><ul><li>默认导出语法 export default 默认导出的成员</li><li>默认导入语法 import 接收名称 from ‘模块标识符’</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入模块成员</span><span class="token keyword">import</span> m1 <span class="token keyword">from</span> <span class="token string">'./m1.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印输出的结果为：</span><span class="token comment" spellcheck="true">// { a: 10, c: 20, show: [Function: show] }</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当前文件模块为 m1.js</span><span class="token comment" spellcheck="true">// 定义私有成员 a 和 c</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">// 外界访问不到变量 d ,因为它没有被暴露出去</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将本模块中的私有成员暴露出去，供其它模块使用</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    a<span class="token punctuation">,</span>    c<span class="token punctuation">,</span>    show<span class="token punctuation">}</span></code></pre><p><strong>注意：每个模块中，只允许使用唯一的一次 export default，否则会报错！</strong></p><h4 id="1-6-2-按需导出-与-按需导入"><a href="#1-6-2-按需导出-与-按需导入" class="headerlink" title="1.6.2 按需导出 与 按需导入"></a>1.6.2 按需导出 与 按需导入</h4><ul><li>按需导出语法 export let s1 = 10</li><li>按需导入语法 import { s1 } from ‘模块标识符’</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入模块成员</span><span class="token keyword">import</span> <span class="token punctuation">{</span> s1<span class="token punctuation">,</span> s2 <span class="token keyword">as</span> ss2<span class="token punctuation">,</span> say <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./m1.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印输出 aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ss2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印输出 ccc</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印输出 [Function: say]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当前文件模块为 m1.js</span><span class="token comment" spellcheck="true">// 向外按需导出变量 s1</span><span class="token keyword">export</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token comment" spellcheck="true">// 向外按需导出变量 s2</span><span class="token keyword">export</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">'ccc'</span><span class="token comment" spellcheck="true">// 向外按需导出方法 say</span><span class="token keyword">export</span> <span class="token keyword">function</span> say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="1-6-3-直接导入并执行模块代码"><a href="#1-6-3-直接导入并执行模块代码" class="headerlink" title="1.6.3 直接导入并执行模块代码"></a>1.6.3 直接导入并执行模块代码</h4><p>有时候，我们<code>只想单纯执行某个模块中的代码，并不需要得到模块中向外暴露的成员</code>，此时，可以直接导入并执行模块代码。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 直接导入并执行模块代码</span><span class="token keyword">import</span> <span class="token string">'./m2.js'</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当前文件模块为 m2.js</span><span class="token comment" spellcheck="true">// 在当前模块中执行一个 for 循环操作</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="2-webpack"><a href="#2-webpack" class="headerlink" title="2. webpack"></a>2. webpack</h2><h3 id="2-1-当前-Web-开发面临的困境"><a href="#2-1-当前-Web-开发面临的困境" class="headerlink" title="2.1 当前 Web 开发面临的困境"></a>2.1 当前 Web 开发面临的困境</h3><ul><li>文件依赖关系错综复杂</li><li>静态资源请求效率低</li><li>模块化支持不友好</li><li>浏览器对高级 Javascript 特性兼容程度较低</li></ul><h3 id="2-2-webpack-概述"><a href="#2-2-webpack-概述" class="headerlink" title="2.2 webpack 概述"></a>2.2 webpack 概述</h3><p><code>webpack</code> 是一个流行的<code>前端项目构建工具（打包工具）</code> ，可以解决当前 web 开发中所面临的困境。<br>webpack 提供了<code>友好的模块化支持</code>，以及<code>代码压缩混淆、 处理 js 兼容问题、 性能优化</code>等强大的功能，从而让程序员把<br>工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</p><p>目前绝大多数企业中的前端项目，都是基于 webpack 进行打包构建的。<br><img width="80%" src="./images/01.png"></p><h3 id="2-3-webpack-的基本使用"><a href="#2-3-webpack-的基本使用" class="headerlink" title="2.3 webpack 的基本使用"></a>2.3 webpack 的基本使用</h3><h4 id="2-3-1-创建列表隔行变色项目"><a href="#2-3-1-创建列表隔行变色项目" class="headerlink" title="2.3.1 创建列表隔行变色项目"></a>2.3.1 创建列表隔行变色项目</h4><p>① 新建项目空白目录，并运行 npm init –y 命令，初始化包管理配置文件 package.json<br>② 新建 src 源代码目录<br>③ 新建 src -&gt; index.html 首页<br>④ 初始化首页基本的结构<br>⑤ 运行 npm install jquery –S 命令，安装 jQuery<br>⑥ 通过模块化的形式，实现列表隔行变色效果</p><h4 id="2-3-2-在项目中安装和配置-webpack"><a href="#2-3-2-在项目中安装和配置-webpack" class="headerlink" title="2.3.2 在项目中安装和配置 webpack"></a>2.3.2 在项目中安装和配置 webpack</h4><p>① 运行 npm install webpack webpack-cli –D 命令，安装 webpack 相关的包<br>② 在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件<br>③ 在 webpack 的配置文件中，初始化如下基本配置：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span> <span class="token comment" spellcheck="true">// mode 用来指定构建模式</span><span class="token punctuation">}</span></code></pre><p>④ 在 package.json 配置文件中的 scripts 节点下，新增 dev 脚本如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span> <span class="token comment" spellcheck="true">// script 节点下的脚本，可以通过 npm run 执行</span><span class="token punctuation">}</span></code></pre><p>⑤ 在终端中运行 npm run dev 命令，启动 webpack 进行项目打包。</p><h4 id="2-3-3-配置打包的入口与出口"><a href="#2-3-3-配置打包的入口与出口" class="headerlink" title="2.3.3 配置打包的入口与出口"></a>2.3.3 配置打包的入口与出口</h4><p>webpack 的 4.x 版本中默认约定：</p><ul><li>打包的入口文件为 src -&gt; index.js</li><li>打包的输出文件为 dist -&gt; main.js</li></ul><p>如果要修改打包的入口与出口，可以在 webpack.config.js 中新增如下配置信息：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 导入 node.js 中专门操作路径的模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包入口文件的路径</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出文件的存放路径</span>        filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span> <span class="token comment" spellcheck="true">// 输出文件的名称</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-4-配置-webpack-的自动打包功能"><a href="#2-3-4-配置-webpack-的自动打包功能" class="headerlink" title="2.3.4 配置 webpack 的自动打包功能"></a>2.3.4 配置 webpack 的自动打包功能</h4><p>① 运行 npm install webpack-dev-server –D 命令，安装支持项目自动打包的工具<br>② 修改 package.json -&gt; scripts 中的 dev 命令如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server"</span> <span class="token comment" spellcheck="true">// script 节点下的脚本，可以通过 npm run 执行</span><span class="token punctuation">}</span></code></pre><p>③ 将 src -&gt; index.html 中， script 脚本的引用路径，修改为 “/buldle.js“<br>④ 运行 npm run dev 命令，重新进行打包<br>⑤ 在浏览器中访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 地址，查看自动打包效果</p><p><strong>注意：</strong></p><ul><li>webpack-dev-server 会启动一个实时打包的 http 服务器</li><li>webpack-dev-server 打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的、看不见的</li></ul><h4 id="2-3-5-配置-html-webpack-plugin-生成预览页面"><a href="#2-3-5-配置-html-webpack-plugin-生成预览页面" class="headerlink" title="2.3.5 配置 html-webpack-plugin 生成预览页面"></a>2.3.5 配置 html-webpack-plugin 生成预览页面</h4><p>① 运行 npm install html-webpack-plugin –D 命令，安装生成预览页面的插件<br>② 修改 webpack.config.js 文件头部区域，添加如下配置信息：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入生成预览页面的插件，得到一个构造函数</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 创建插件的实例对象</span>    template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定要用到的模板文件</span>    filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span> <span class="token comment" spellcheck="true">// 指定生成的文件的名称，该文件存在于内存中，在目录中不显示</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>③ 修改 webpack.config.js 文件中向外暴露的配置对象，新增如下配置节点：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> htmlPlugin <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// plugins 数组是 webpack 打包期间会用到的一些插件列表</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-6-配置自动打包相关的参数"><a href="#2-3-6-配置自动打包相关的参数" class="headerlink" title="2.3.6 配置自动打包相关的参数"></a>2.3.6 配置自动打包相关的参数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// package.json中的配置</span><span class="token comment" spellcheck="true">// --open 打包完成后自动打开浏览器页面</span><span class="token comment" spellcheck="true">// --host 配置 IP 地址</span><span class="token comment" spellcheck="true">// --port 配置端口</span><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open --host 127.0.0.1 --port 8888"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="2-4-webpack-中的加载器"><a href="#2-4-webpack-中的加载器" class="headerlink" title="2.4 webpack 中的加载器"></a>2.4 webpack 中的加载器</h2><h3 id="2-4-1-通过-loader-打包非-js-模块"><a href="#2-4-1-通过-loader-打包非-js-模块" class="headerlink" title="2.4.1 通过 loader 打包非 js 模块"></a>2.4.1 通过 loader 打包非 js 模块</h3><p>在实际开发过程中， webpack 默认只能打包处理以 .js 后缀名结尾的模块，其他非 .js 后缀名结<br>尾的模块， webpack 默认处理不了， 需要调用 loader 加载器才可以正常打包，否则会报错！</p><p>loader 加载器可以协助 webpack 打包处理特定的文件模块，比如：</p><ul><li>less-loader 可以打包处理 .less 相关的文件</li><li>sass-loader 可以打包处理 .scss 相关的文件</li><li>url-loader 可以打包处理 css 中与 url 路径相关的文件</li></ul><h3 id="2-4-2-loader-的调用过程"><a href="#2-4-2-loader-的调用过程" class="headerlink" title="2.4.2 loader 的调用过程"></a>2.4.2 loader 的调用过程</h3><img width="80%" src="./images/02.png"><h2 id="2-5-webpack-中加载器的基本使用"><a href="#2-5-webpack-中加载器的基本使用" class="headerlink" title="2.5 webpack 中加载器的基本使用"></a>2.5 webpack 中加载器的基本使用</h2><ul><li>CSS</li><li>LESS</li><li>SCSS</li><li>PostCSS</li><li>JavaScript</li><li>Image/Font</li><li>Vue</li></ul><img width="80%" src="./images/03.png"><h3 id="2-5-1-打包处理-css-文件"><a href="#2-5-1-打包处理-css-文件" class="headerlink" title="2.5.1 打包处理 css 文件"></a>2.5.1 打包处理 css 文件</h3><p>① 运行 npm i style-loader css-loader -D 命令，安装处理 css 文件的 loader<br>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 所有第三方文件模块的匹配规则</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>其中， test 表示匹配的文件类型， use 表示对应要调用的 loader</p><p><strong>注意：</strong></p><ul><li>use 数组中指定的 loader 顺序是固定的</li><li>多个 loader 的调用顺序是：从后往前调用</li></ul><h3 id="2-5-2-打包处理-less-文件"><a href="#2-5-2-打包处理-less-文件" class="headerlink" title="2.5.2 打包处理 less 文件"></a>2.5.2 打包处理 less 文件</h3><p>① 运行 npm i less-loader less -D 命令<br>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 所有第三方文件模块的匹配规则</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-3-打包处理-scss-文件"><a href="#2-5-3-打包处理-scss-文件" class="headerlink" title="2.5.3 打包处理 scss 文件"></a>2.5.3 打包处理 scss 文件</h3><p>① 运行 npm i sass-loader node-sass -D 命令<br>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 所有第三方文件模块的匹配规则</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-4-配置-postCSS-自动添加-css-的兼容前缀"><a href="#2-5-4-配置-postCSS-自动添加-css-的兼容前缀" class="headerlink" title="2.5.4 配置 postCSS 自动添加 css 的兼容前缀"></a>2.5.4 配置 postCSS 自动添加 css 的兼容前缀</h3><p>① 运行 npm i postcss-loader autoprefixer -D 命令<br>② 在项目根目录中创建 postcss 的配置文件 postcss.config.js，并初始化如下配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 导入自动添加前缀的插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 挂载插件</span><span class="token punctuation">}</span></code></pre><p>③ 在 webpack.config.js 的 module -&gt; rules 数组中，修改 css 的 loader 规则如下：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-5-打包样式表中的图片和字体文件"><a href="#2-5-5-打包样式表中的图片和字体文件" class="headerlink" title="2.5.5 打包样式表中的图片和字体文件"></a>2.5.5 打包样式表中的图片和字体文件</h3><p>① 运行 npm i url-loader file-loader -D 命令<br>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下:</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=16940'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>其中 ? 之后的是 loader 的参数项。<br>limit 用来指定图片的大小，单位是字节(byte),只有小于 limit 大小的图片，才会被转为 base64 图片</p><h3 id="2-5-6-打包处理-js-文件中的高级语法"><a href="#2-5-6-打包处理-js-文件中的高级语法" class="headerlink" title="2.5.6. 打包处理 js 文件中的高级语法"></a>2.5.6. 打包处理 js 文件中的高级语法</h3><p>① 安装babel转换器相关的包： npm i babel-loader @babel/core @babel/runtime -D<br>② 安装babel语法插件相关的包： npm i @babel/preset-env @babel/plugin-transformruntime @babel/plugin-proposal-class-properties –D<br>③ 在项目根目录中，创建 babel 配置文件 babel.config.js 并初始化基本配置如下：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    presets<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'@babel/preset-env'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'@babel/plugin-transform-runtime'</span><span class="token punctuation">,</span> '@babel<span class="token operator">/</span>plugin<span class="token operator">-</span>proposalclass<span class="token operator">-</span>properties’ <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>④ 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// exclude 为排除项，表示 babel-loader 不需要处理 node_modules 中的 js 文件</span><span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span> <span class="token punctuation">}</span></code></pre><h2 id="3-Vue-单文件组件"><a href="#3-Vue-单文件组件" class="headerlink" title="3. Vue 单文件组件"></a>3. Vue 单文件组件</h2><h3 id="3-1-传统组件的问题和解决方案"><a href="#3-1-传统组件的问题和解决方案" class="headerlink" title="3.1 传统组件的问题和解决方案"></a>3.1 传统组件的问题和解决方案</h3><h4 id="3-1-1-问题"><a href="#3-1-1-问题" class="headerlink" title="3.1.1 问题"></a>3.1.1 问题</h4><ol><li>全局定义的组件必须保证组件的名称不重复</li><li>字符串模板缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 \</li><li>不支持 CSS 意味着当 HTML 和 JavaScript 组件化时， CSS 明显被遗漏</li><li>没有构建步骤限制，只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器（如： Babel）</li></ol><h4 id="3-1-2-解决方案"><a href="#3-1-2-解决方案" class="headerlink" title="3.1.2 解决方案"></a>3.1.2 解决方案</h4><p>针对传统组件的问题， Vue 提供了一个解决方案 —— 使用 Vue 单文件组件。</p><h3 id="3-2-Vue单文件组件的基本用法"><a href="#3-2-Vue单文件组件的基本用法" class="headerlink" title="3.2 Vue单文件组件的基本用法"></a>3.2 Vue单文件组件的基本用法</h3><p>单文件组件的组成结构</p><ul><li>template 组件的模板区域</li><li>script 业务逻辑区域</li><li>style 样式区域</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里用于定义Vue组件的模板内容 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 这里用于定义Vue组件的业务逻辑</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 私有数据</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 处理函数</span>        <span class="token comment" spellcheck="true">// ... 其它业务逻辑</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span>    <span class="token comment" spellcheck="true">/* 这里用于定义组件的样式 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h3 id="3-3-webpack-中配置-vue-组件的加载器"><a href="#3-3-webpack-中配置-vue-组件的加载器" class="headerlink" title="3.3 webpack 中配置 vue 组件的加载器"></a>3.3 webpack 中配置 vue 组件的加载器</h3><p>① 运行 npm i vue-loader vue-template-compiler -D 命令<br>② 在 webpack.config.js 配置文件中，添加 vue-loader 的配置项如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ... 其它规则</span>        <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ... 其它插件</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 请确保引入这个插件！</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-在-webpack-项目中使用-vue"><a href="#3-4-在-webpack-项目中使用-vue" class="headerlink" title="3.4 在 webpack 项目中使用 vue"></a>3.4 在 webpack 项目中使用 vue</h3><p>① 运行 npm i vue –S 安装 vue<br>② 在 src -&gt; index.js 入口文件中，通过 import Vue from ‘vue’ 来导入 vue 构造函数<br>③ 创建 vue 的实例对象，并指定要控制的 el 区域<br>④ 通过 render 函数渲染 App 根组件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 导入 Vue 构造函数</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 2. 导入 App 根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./components/App.vue'</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 3. 指定 vm 实例要控制的页面区域</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 4. 通过 render 函数，把指定的组件渲染到 el 区域中</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-5-webpack-打包发布"><a href="#3-5-webpack-打包发布" class="headerlink" title="3.5 webpack 打包发布"></a>3.5 webpack 打包发布</h3><p>上线之前需要通过webpack将应用进行整体打包，可以通过 package.json 文件配置打包命令：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在package.json文件中配置 webpack 打包命令</span><span class="token comment" spellcheck="true">// 该命令默认加载项目根目录中的 webpack.config.js 配置文件</span><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于打包的命令</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack -p"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 用于开发调试的命令</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --open --host 127.0.0.1 --port 3000"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="4-Vue-脚手架"><a href="#4-Vue-脚手架" class="headerlink" title="4. Vue 脚手架"></a>4. Vue 脚手架</h2><h3 id="4-1-Vue-脚手架的基本用法"><a href="#4-1-Vue-脚手架的基本用法" class="headerlink" title="4.1 Vue 脚手架的基本用法"></a>4.1 Vue 脚手架的基本用法</h3><p>Vue 脚手架用于快速生成 Vue 项目基础架构，其官网地址为： <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p><p>使用步骤</p><ol><li>安装 3.x 版本的 Vue 脚手架：</li></ol><p>npm install -g @vue/cli</p><p>基于3.x版本的脚手架创建vue项目</p><p>// 1. 基于 交互式命令行 的方式，创建 新版 vue 项目<br>vue create my-project<br>// 2. 基于 图形化界面 的方式，创建 新版 vue 项目<br>vue ui<br>// 3. 基于 2.x 的旧模板，创建 旧版 vue 项目<br>npm install -g @vue/cli-init<br>vue init webpack my-project</p><h3 id="4-2-Vue-脚手架生成的项目结构分析"><a href="#4-2-Vue-脚手架生成的项目结构分析" class="headerlink" title="4.2 Vue 脚手架生成的项目结构分析"></a>4.2 Vue 脚手架生成的项目结构分析</h3><img width="80%" src="./images/04.png"><h3 id="4-3-Vue-脚手架的自定义配置"><a href="#4-3-Vue-脚手架的自定义配置" class="headerlink" title="4.3 Vue 脚手架的自定义配置"></a>4.3 Vue 脚手架的自定义配置</h3><ol><li><p>通过 package.json 配置项目</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 必须是符合规范的json语法</span><span class="token string">"vue"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"devServer"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token string">"8888"</span><span class="token punctuation">,</span>     <span class="token string">"open"</span> <span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>注意： 不推荐使用这种配置方式。因为 package.json 主要用来管理包的配置信息；为了方便维护，推荐将 vue 脚<br>手架相关的配置，单独定义到 vue.config.js 配置文件中。</p></li><li><p>通过单独的配置文件</p></li></ol><p>① 在项目的跟目录创建文件 vue.config.js<br>② 在该文件中进行相关配置，从而覆盖默认配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">8888</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="5-Element-UI-的基本使用"><a href="#5-Element-UI-的基本使用" class="headerlink" title="5. Element-UI 的基本使用"></a>5. Element-UI 的基本使用</h2><p><code>Element-UI</code>： 一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的<code>桌面端组件库</code>。<br>官网地址为： <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p><h3 id="5-1-基于命令行方式手动安装"><a href="#5-1-基于命令行方式手动安装" class="headerlink" title="5.1 基于命令行方式手动安装"></a>5.1 基于命令行方式手动安装</h3><p>① 安装依赖包 npm i element-ui –S<br>② 导入 Element-UI 相关资源</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入组件库</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入组件相关样式</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置 Vue 插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-基于图形化界面自动安装"><a href="#5-2-基于图形化界面自动安装" class="headerlink" title="5.2 基于图形化界面自动安装"></a>5.2 基于图形化界面自动安装</h3><p>① 运行 vue ui 命令，打开图形化界面<br>② 通过 Vue 项目管理器， 进入具体的项目配置面板<br>③ 点击 插件 -&gt; 添加插件，进入插件查询面板<br>④ 搜索 vue-cli-plugin-element 并安装<br>⑤ 配置插件，实现按需导入，从而减少打包后项目的体积</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2019/06/09/ajax/"/>
      <url>/2019/06/09/ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Ajax-基础"><a href="#1-Ajax-基础" class="headerlink" title="1. Ajax 基础"></a>1. Ajax 基础</h2><h3 id="1-1-传统网站中存在的问题"><a href="#1-1-传统网站中存在的问题" class="headerlink" title="1.1 传统网站中存在的问题"></a>1.1 传统网站中存在的问题</h3><ul><li>网速慢的情况下，页面加载时间长，用户只能等待</li><li>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</li><li>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</li></ul><h3 id="1-2-Ajax-概述"><a href="#1-2-Ajax-概述" class="headerlink" title="1.2 Ajax 概述"></a>1.2 Ajax 概述</h3><p>Ajax：标准读音 [ˈeɪˌdʒæks] ，中文音译：阿贾克斯<br>它是浏览器提供的一套方法，可以实现页面无刷新更新数据，提高用户浏览网站应用的体验。</p><img width="80%" src="./images/01.png"><h3 id="1-3-Ajax-的应用场景"><a href="#1-3-Ajax-的应用场景" class="headerlink" title="1.3 Ajax 的应用场景"></a>1.3 Ajax 的应用场景</h3><ul><li>页面上拉加载更多数据</li><li>列表数据无刷新分页</li><li>表单项离开焦点数据验证</li><li>搜索框提示文字下拉列表</li></ul><img width="70%" src="./images/01.png"><img width="70%" src="./images/05.png"><img width="70%" src="./images/03.png"><img width="70%" src="./images/04.png"><h3 id="1-4-Ajax-的运行环境"><a href="#1-4-Ajax-的运行环境" class="headerlink" title="1.4 Ajax 的运行环境"></a>1.4 Ajax 的运行环境</h3><p>Ajax 技术需要<code>运行在网站环境中才能生效</code>，可以使用Node创建的服务器作为网站服务器。</p><h2 id="2-Ajax-运行原理及实现"><a href="#2-Ajax-运行原理及实现" class="headerlink" title="2 Ajax 运行原理及实现"></a>2 Ajax 运行原理及实现</h2><h3 id="2-1-Ajax-运行原理"><a href="#2-1-Ajax-运行原理" class="headerlink" title="2.1 Ajax 运行原理"></a>2.1 Ajax 运行原理</h3><p>Ajax 相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验。<br><img width="80%" src="./images/07.png"><br><img width="80%" src="./images/06.png"></p><h3 id="2-2-Ajax-的实现步骤"><a href="#2-2-Ajax-的实现步骤" class="headerlink" title="2.2 Ajax 的实现步骤"></a>2.2 Ajax 的实现步骤</h3><ol><li><p>创建 Ajax 对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>告诉 Ajax 请求地址以及请求方式</p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>发送请求</p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取服务器端给与客户端的响应数据</p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="2-3-服务器端响应的数据格式"><a href="#2-3-服务器端响应的数据格式" class="headerlink" title="2.3 服务器端响应的数据格式"></a>2.3 服务器端响应的数据格式</h3><p>在真实的项目中，服务器端大多数情况下会以 JSON 对象作为响应数据的格式。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果展示在页面中。</p><p>在 http 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</p><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将 json 字符串转换为json对象</span></code></pre><h3 id="2-4-请求参数传递"><a href="#2-4-请求参数传递" class="headerlink" title="2.4 请求参数传递"></a>2.4 请求参数传递</h3><p>传统网站表单提交</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> &lt;!– http://www.example.com?username=zhangsan&amp;password=123456 --></code></pre><p>GET 请求方式</p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.example.com?name=zhangsan&amp;age=20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>POST 请求方式</p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span> xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'name=zhangsan&amp;age=20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-请求报文"><a href="#2-5-请求报文" class="headerlink" title="2.5 请求报文"></a>2.5 请求报文</h3><p>在 HTTP 请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，这些数据和信息要遵守规定好的格式。<br><img width="80%" src="./images/08.png"></p><h3 id="2-6-请求参数的格式"><a href="#2-6-请求参数的格式" class="headerlink" title="2.6 请求参数的格式"></a>2.6 请求参数的格式</h3><ol><li><p>application/x-www-form-urlencoded</p><pre class=" language-javascript"><code class="language-javascript">name<span class="token operator">=</span>zhangsan<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token operator">&amp;</span>sex<span class="token operator">=</span>男</code></pre></li><li><p>application/json</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span></code></pre></li></ol><p>在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json。</p><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将json对象转换为json字符串</span></code></pre><p><strong>注意：get 请求是不能提交 json 对象数据格式的，传统网站的表单提交也是不支持 json 对象数据格式的。</strong></p><h3 id="2-7-获取服务器端的响应"><a href="#2-7-获取服务器端的响应" class="headerlink" title="2.7 获取服务器端的响应"></a>2.7 获取服务器端的响应</h3><p>Ajax 状态码</p><p>在创建ajax对象，配置ajax对象，发送请求，以及接收完服务器端响应数据，这个过程中的每一个步骤都会对应一个数值，这个数值就是ajax状态码。</p><ol start="0"><li>请求未初始化(还没有调用open())</li><li>请求已经建立，但是还没有发送(还没有调用send())</li><li>请求已经发送</li><li>请求正在处理中，通常响应中已经有部分数据可以用了</li><li>响应已经完成，可以获取并使用服务器的响应了</li></ol><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span>readyState <span class="token comment" spellcheck="true">// 获取Ajax状态码</span></code></pre><h3 id="2-8-获取服务器端的响应"><a href="#2-8-获取服务器端的响应" class="headerlink" title="2.8 获取服务器端的响应"></a>2.8 获取服务器端的响应</h3><p>onreadystatechange 事件</p><p>当 Ajax 状态码发生变化时将自动触发该事件。</p><p>在事件处理函数中可以获取 Ajax 状态码并对其进行判断，当状态码为 4 时就可以通过 xhr.responseText 获取服务器端的响应数据了。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 当Ajax状态码发生变化时</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断当Ajax状态码为4时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取服务器端的响应数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-两种获取服务器端响应方式的区别"><a href="#2-9-两种获取服务器端响应方式的区别" class="headerlink" title="2.9 两种获取服务器端响应方式的区别"></a>2.9 两种获取服务器端响应方式的区别</h3><img width="80%" src="./images/09.png"><h3 id="2-10-Ajax-错误处理"><a href="#2-10-Ajax-错误处理" class="headerlink" title="2.10 Ajax 错误处理"></a>2.10 Ajax 错误处理</h3><ol><li><p>网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</p><blockquote><p>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取http状态码</p></blockquote></li><li><p>网络畅通，服务器端没有接收到请求，返回404状态码。</p><blockquote><p>检查请求地址是否错误。</p></blockquote></li><li><p>网络畅通，服务器端能接收到请求，服务器端返回500状态码。</p><blockquote><p>服务器端错误，找后端程序员进行沟通。</p></blockquote></li><li><p>网络中断，请求无法发送到服务器端。</p><blockquote><p>会触发xhr对象下面的onerror事件，在onerror事件处理函数中对错误进行处理。</p></blockquote></li></ol><h3 id="2-11-低版本-IE-浏览器的缓存问题"><a href="#2-11-低版本-IE-浏览器的缓存问题" class="headerlink" title="2.11 低版本 IE 浏览器的缓存问题"></a>2.11 低版本 IE 浏览器的缓存问题</h3><p><strong>问题</strong>：在低版本的 IE 浏览器中，Ajax 请求有严重的缓存问题，即在请求地址不发生变化的情况下，只有第一次请求会真正发送到服务器端，后续的请求都会从浏览器的缓存中获取结果。即使服务器端的数据更新了，客户端依然拿到的是缓存中的旧数据。</p><p><strong>解决方案</strong>：在请求地址的后面加请求参数，保证每一次请求中的请求参数的值不相同。 </p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.example.com?t='</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-Ajax-异步编程"><a href="#3-Ajax-异步编程" class="headerlink" title="3. Ajax 异步编程"></a>3. Ajax 异步编程</h2><h3 id="3-1-同步异步概述"><a href="#3-1-同步异步概述" class="headerlink" title="3.1 同步异步概述"></a>3.1 同步异步概述</h3><p><strong>同步</strong></p><ul><li>一个人同一时间只能做一件事情，只有一件事情做完，才能做另外一件事情。</li><li>落实到代码中，就是上一行代码执行完成后，才能执行下一行代码，即代码逐行执行。<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><strong>异步</strong></p><ul><li>一个人一件事情做了一半，转而去做其他事情，当其他事情做完以后，再回过头来继续做之前未完成的事情。</li><li>落实到代码上，就是异步代码虽然需要花费时间去执行，但程序不会等待异步代码执行完成后再继续执行后续代码，而是直接执行后续代码，当后续代码执行完成后再回头看异步代码是否返回结果，如果已有返回结果，再调用事先准备好的回调函数处理异步代码执行的结果。</li></ul><pre class=" language-javascript"><code class="language-javascript"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'last'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-Ajax-封装"><a href="#3-2-Ajax-封装" class="headerlink" title="3.2 Ajax 封装"></a>3.2 Ajax 封装</h3><p><strong>问题</strong>：发送一次请求代码过多，发送多次请求代码冗余且重复。<br><strong>解决方案</strong>：将请求代码封装到函数中，发请求时调用函数即可。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>     url<span class="token punctuation">:</span> <span class="token string">'http://www.example.com'</span><span class="token punctuation">,</span>     success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架</title>
      <link href="/2019/06/02/express/"/>
      <url>/2019/06/02/express/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Express框架简介及初体验"><a href="#1-Express框架简介及初体验" class="headerlink" title="1. Express框架简介及初体验"></a>1. Express框架简介及初体验</h2><h3 id="1-1-Express框架是什么"><a href="#1-1-Express框架是什么" class="headerlink" title="1.1 Express框架是什么"></a>1.1 Express框架是什么</h3><p>Express是一个基于Node平台的web应用开发框架，它提供了一系列的强大特性，帮助你创建各种Web应用。我们可以使用 <code>npm install express</code> 命令进行下载。</p><h3 id="1-2-Express框架特性"><a href="#1-2-Express框架特性" class="headerlink" title="1.2 Express框架特性"></a>1.2 Express框架特性</h3><ul><li>提供了方便简洁的路由定义方式</li><li>对获取HTTP请求参数进行了简化处理</li><li>对模板引擎支持程度高，方便渲染动态HTML页面</li><li>提供了中间件机制有效控制HTTP请求</li><li>拥有大量第三方中间件对功能进行扩展</li></ul><h3 id="1-3-原生Node-js与Express框架对比之路由"><a href="#1-3-原生Node-js与Express框架对比之路由" class="headerlink" title="1.3 原生Node.js与Express框架对比之路由"></a>1.3 原生Node.js与Express框架对比之路由</h3><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取客户端的请求路径</span>     <span class="token keyword">let</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 对请求路径进行判断 不同的路径地址响应不同的内容</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">||</span> pathname <span class="token operator">==</span> <span class="token string">'index'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'欢迎来到首页'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span> <span class="token string">'/list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'欢迎来到列表页页'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">==</span> <span class="token string">'/about'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'欢迎来到关于我们页面'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'抱歉, 您访问的页面出游了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 当客户端以get方式访问/时</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 对客户端做出响应</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 当客户端以post方式访问/add路由时</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'使用post方式请求了/add路由'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4-原生Node-js与Express框架对比之获取请求参数"><a href="#1-4-原生Node-js与Express框架对比之获取请求参数" class="headerlink" title="1.4 原生Node.js与Express框架对比之获取请求参数"></a>1.4 原生Node.js与Express框架对比之获取请求参数</h3><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取GET参数</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>query<span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取POST参数</span>    <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取GET参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取POST参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><h3 id="1-5-Express初体验"><a href="#1-5-Express初体验" class="headerlink" title="1.5 Express初体验"></a>1.5 Express初体验</h3><p>使用Express框架创建web服务器及其简单，调用express模块返回的函数即可。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 引入Express框架</span> <span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用框架创建web服务器</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当客户端以get方式访问/路由时</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对客户端做出响应 send方法会根据内容的类型自动设置请求头</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;h2>Hello Express&lt;/h2> {say: 'hello'}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 程序监听3000端口</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-中间件"><a href="#2-中间件" class="headerlink" title="2. 中间件"></a>2. 中间件</h2><h3 id="2-1-什么是中间件"><a href="#2-1-什么是中间件" class="headerlink" title="2.1 什么是中间件"></a>2.1 什么是中间件</h3><p>中间件就是一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。<br><img src="./images/01.png" width="80%"></p><p>中间件主要由两部分构成，<code>中间件方法</code>以及<code>请求处理函数</code>。<br>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'请求路径'</span><span class="token punctuation">,</span> <span class="token string">'处理函数'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 接收并处理get请求</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'请求路径'</span><span class="token punctuation">,</span> <span class="token string">'处理函数'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 接收并处理post请求</span></code></pre><p>可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。<br>默认情况下，请求从上到下依次匹配中间件，一旦匹配成功，终止匹配。<br>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     req<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-app-use中间件用法"><a href="#2-2-app-use中间件用法" class="headerlink" title="2.2 app.use中间件用法"></a>2.2 app.use中间件用法</h3><p>app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-3-中间件应用"><a href="#2-3-中间件应用" class="headerlink" title="2.3 中间件应用"></a>2.3 中间件应用</h3><ol><li>路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面。</li><li>网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中。</li><li>自定义404页面</li></ol><h3 id="2-4-错误处理中间件"><a href="#2-4-错误处理中间件" class="headerlink" title="2.4 错误处理中间件"></a>2.4 错误处理中间件</h3><p>在程序执行的过程中，不可避免的会出现一些无法预料的错误，比如文件读取失败，数据库连接失败。<br>错误处理中间件是一个集中处理错误的地方。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'服务器发生未知错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>当程序出现错误时，调用next()方法，并且将错误信息通过参数的形式传递给next()方法，即可触发错误处理中间件。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"/file-does-not-exist"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-捕获错误"><a href="#2-5-捕获错误" class="headerlink" title="2.5 捕获错误"></a>2.5 捕获错误</h3><p>在node.js中，异步API的错误信息都是通过回调函数获取的，支持Promise对象的异步API发生错误可以通过catch方法捕获。<br>异步函数执行如果发生错误要如何捕获错误呢？</p><p>try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能其他类型的API发生的错误。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">next</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-Express请求处理"><a href="#3-Express请求处理" class="headerlink" title="3. Express请求处理"></a>3. Express请求处理</h2><h3 id="3-1-构建模块化路由"><a href="#3-1-构建模块化路由" class="headerlink" title="3.1 构建模块化路由"></a>3.1 构建模块化路由</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建路由对象</span> <span class="token keyword">const</span> home <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将路由和请求路径进行匹配</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在home路由下继续创建路由</span> home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//  /home/index</span>         res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'欢迎来到博客展示页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-构建模块化路由"><a href="#3-2-构建模块化路由" class="headerlink" title="3.2 构建模块化路由"></a>3.2 构建模块化路由</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// home.js</span> <span class="token keyword">const</span> home <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'欢迎来到博客展示页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> home<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// admin.js</span> <span class="token keyword">const</span> admin <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> admin<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'欢迎来到博客管理页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> admin<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// app.js</span> <span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./route/home.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./route/admin.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> admin<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-3-GET参数的获取"><a href="#3-3-GET参数的获取" class="headerlink" title="3.3 GET参数的获取"></a>3.3 GET参数的获取</h3><p>Express框架中使用req.query即可获取GET参数，框架内部会将GET参数转换为对象并返回。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 接收地址栏中问号后面的参数</span> <span class="token comment" spellcheck="true">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {"name": "zhangsan", "age": "30"}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-4-POST参数的获取"><a href="#3-4-POST参数的获取" class="headerlink" title="3.4 POST参数的获取"></a>3.4 POST参数的获取</h3><p>Express中接收post请求参数需要借助第三方包 body-parser。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 引入body-parser模块</span> <span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 配置body-parser模块</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 接收请求</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收请求参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><h3 id="3-5-Express路由参数"><a href="#3-5-Express路由参数" class="headerlink" title="3.5 Express路由参数"></a>3.5 Express路由参数</h3><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/find/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {id: 123} </span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>find<span class="token operator">/</span><span class="token number">123</span></code></pre><h3 id="3-6-静态资源的处理"><a href="#3-6-静态资源的处理" class="headerlink" title="3.6 静态资源的处理"></a>3.6 静态资源的处理</h3><p>通过Express内置的express.static可以方便地托管静态文件，例如img、CSS、JavaScript 文件等。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在，public 目录下面的文件就可以访问了。</p><ul><li><a href="http://localhost:3000/images/kitten.jpg" target="_blank" rel="noopener">http://localhost:3000/images/kitten.jpg</a></li><li><a href="http://localhost:3000/css/style.css" target="_blank" rel="noopener">http://localhost:3000/css/style.css</a></li><li><a href="http://localhost:3000/js/app.js" target="_blank" rel="noopener">http://localhost:3000/js/app.js</a></li><li><a href="http://localhost:3000/images/bg.png" target="_blank" rel="noopener">http://localhost:3000/images/bg.png</a></li><li><a href="http://localhost:3000/hello.html" target="_blank" rel="noopener">http://localhost:3000/hello.html</a> </li></ul><h2 id="4-express-art-template模板引擎"><a href="#4-express-art-template模板引擎" class="headerlink" title="4. express-art-template模板引擎"></a>4. express-art-template模板引擎</h2><h3 id="4-1-模板引擎"><a href="#4-1-模板引擎" class="headerlink" title="4.1 模板引擎"></a>4.1 模板引擎</h3><ul><li>为了使art-template模板引擎能够更好的和Express框架配合，模板引擎官方在原art-template模板引擎的基础上封装了express-art-template。</li><li>使用<code>npm install art-template express-art-template</code>命令进行安装。</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 当渲染后缀为art的模板时 使用express-art-template</span> app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'art'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置模板存放目录</span> app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染模板时不写后缀 默认拼接art后缀</span> app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'art'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 渲染模板</span>     res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="4-2-app-locals-对象"><a href="#4-2-app-locals-对象" class="headerlink" title="4.2 app.locals 对象"></a>4.2 app.locals 对象</h3><p>将变量设置到app.locals对象下面，这个数据在所有的模板中都可以获取到。</p><pre class=" language-javascript"><code class="language-javascript"> app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>     age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span>     age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2019/05/29/mongodb/"/>
      <url>/2019/05/29/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库概述及环境搭建"><a href="#1-数据库概述及环境搭建" class="headerlink" title="1. 数据库概述及环境搭建"></a>1. 数据库概述及环境搭建</h2><h3 id="1-1-为什么要使用数据库"><a href="#1-1-为什么要使用数据库" class="headerlink" title="1.1 为什么要使用数据库"></a>1.1 为什么要使用数据库</h3><ul><li>动态网站中的数据都是存储在数据库中的</li><li>数据库可以用来持久存储客户端通过表单收集的用户信息</li><li>数据库软件本身可以对数据进行高效的管理</li></ul><h3 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h3><p>数据库即存储数据的仓库，可以将数据进行有序的分门别类的存储。它是独立于语言之外的软件，可以通过API去操作它。<br>常见的数据库软件有：mysql、mongoDB、oracle。</p><img width="80%" src="./images/01.png"><h3 id="1-3-MongoDB数据库下载安装"><a href="#1-3-MongoDB数据库下载安装" class="headerlink" title="1.3 MongoDB数据库下载安装"></a>1.3 MongoDB数据库下载安装</h3><p>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></p><img width="80%" src="./images/02.png"><h3 id="1-4-MongoDB可视化软件"><a href="#1-4-MongoDB可视化软件" class="headerlink" title="1.4 MongoDB可视化软件"></a>1.4 MongoDB可视化软件</h3><p>MongoDB可视化操作软件，是使用图形界面操作数据库的一种方式。<br><img width="80%" src="./images/03.png"></p><h3 id="1-5-数据库相关概念"><a href="#1-5-数据库相关概念" class="headerlink" title="1.5 数据库相关概念"></a>1.5 数据库相关概念</h3><p>在一个数据库软件中可以包含多个数据仓库，在每个数据仓库中可以包含多个数据集合，每个数据集合中可以包含多条文档（具体的数据）。<br><img width="80%" src="./images/04.png"></p><h3 id="1-6-Mongoose第三方包"><a href="#1-6-Mongoose第三方包" class="headerlink" title="1.6 Mongoose第三方包"></a>1.6 Mongoose第三方包</h3><ul><li>使用Node.js操作MongoDB数据库需要依赖Node.js第三方包mongoose</li><li>使用<code>npm install mongoose</code>命令下载</li></ul><h3 id="1-7-启动MongoDB"><a href="#1-7-启动MongoDB" class="headerlink" title="1.7 启动MongoDB"></a>1.7 启动MongoDB</h3><p>在命令行工具中运行<code>net start mongoDB</code>即可启动MongoDB，否则MongoDB将无法连接。</p><h3 id="1-8-数据库连接"><a href="#1-8-数据库连接" class="headerlink" title="1.8 数据库连接"></a>1.8 数据库连接</h3><p>使用mongoose提供的<code>connect</code>方法即可连接数据库。</p><pre class=" language-javascript"><code class="language-javascript"> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/playground'</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接失败'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-9-创建数据库"><a href="#1-9-创建数据库" class="headerlink" title="1.9 创建数据库"></a>1.9 创建数据库</h3><p>在MongoDB中<code>不需要显式创建数据库</code>，如果正在使用的数据库不存在，<code>MongoDB会自动创建</code>。</p><h2 id="2-MongoDB增删改查操作"><a href="#2-MongoDB增删改查操作" class="headerlink" title="2. MongoDB增删改查操作"></a>2. MongoDB增删改查操作</h2><h3 id="2-1-创建集合"><a href="#2-1-创建集合" class="headerlink" title="2.1 创建集合"></a>2.1 创建集合</h3><p>创建集合分为两步，一是<code>对集合设定规则</code>，二是<code>创建集合</code>，创建mongoose.Schema构造函数的实例即可创建集合。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 设定集合规则</span> <span class="token keyword">const</span> courseSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>     author<span class="token punctuation">:</span> String<span class="token punctuation">,</span>     isPublished<span class="token punctuation">:</span> Boolean <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建集合并应用规则</span> <span class="token keyword">const</span> Course <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Course'</span><span class="token punctuation">,</span> courseSchema<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// courses</span></code></pre><h3 id="2-2-创建文档"><a href="#2-2-创建文档" class="headerlink" title="2.2 创建文档"></a>2.2 创建文档</h3><p>创建文档实际上就是<code>向集合中插入数据</code>。<br>分为两步：</p><ul><li>创建集合实例。</li><li>调用实例对象下的save方法将数据保存到数据库中。</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 创建集合实例</span> <span class="token keyword">const</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'Node.js course'</span><span class="token punctuation">,</span>     author<span class="token punctuation">:</span> <span class="token string">'szl'</span><span class="token punctuation">,</span>     tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token string">'backend'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     isPublished<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将数据保存到数据库中</span> course<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">Course<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'JavaScript基础'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'szl'</span><span class="token punctuation">,</span> isPublish<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  错误对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//  当前插入的文档</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">Course<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'JavaScript基础'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'szl'</span><span class="token punctuation">,</span> isPublish<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-3-mongoDB数据库导入数据"><a href="#2-3-mongoDB数据库导入数据" class="headerlink" title="2.3 mongoDB数据库导入数据"></a>2.3 mongoDB数据库导入数据</h3><p>mongoimport –d 数据库名称 –c 集合名称 –file 要导入的数据文件<br>找到mongodb数据库的安装目录，将安装目录下的bin目录放置在环境变量中。</p><h3 id="2-4-查询文档"><a href="#2-4-查询文档" class="headerlink" title="2.4 查询文档"></a>2.4 查询文档</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  根据条件查找文档（条件为空则查找所有文档）</span>Course<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回文档集合</span><span class="token punctuation">[</span><span class="token punctuation">{</span>    _id<span class="token punctuation">:</span> 5c0917ed37ec9b03c07cf95f<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'node.js基础'</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> 'szl‘<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>     _id<span class="token punctuation">:</span> 5c09dea28acfb814980ff827<span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'Javascript'</span><span class="token punctuation">,</span>     author<span class="token punctuation">:</span> 'szl‘<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  根据条件查找文档</span>Course<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'node.js基础'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 返回文档</span> <span class="token punctuation">{</span>    _id<span class="token punctuation">:</span> 5c0917ed37ec9b03c07cf95f<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'node.js基础'</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> 'szl‘<span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//  匹配大于 小于</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>$gt<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> $lt<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  匹配包含</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>hobbies<span class="token punctuation">:</span> <span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'敲代码'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  选择要查询的字段  </span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'name email'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将数据按照年龄进行排序</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  skip 跳过多少条数据  limit 限制查询数量</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-5-删除文档"><a href="#2-5-删除文档" class="headerlink" title="2.5 删除文档"></a>2.5 删除文档</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 删除单个</span>Course<span class="token punctuation">.</span><span class="token function">findOneAndDelete</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除多个</span>User<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-6-更新文档"><a href="#2-6-更新文档" class="headerlink" title="2.6 更新文档"></a>2.6 更新文档</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 更新单个</span>User<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>查询条件<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>要修改的值<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新多个</span>User<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>查询条件<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>要更改的值<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-7-mongoose验证"><a href="#2-7-mongoose验证" class="headerlink" title="2.7 mongoose验证"></a>2.7 mongoose验证</h3><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败。</p><ul><li>required: true 必传字段</li><li>minlength：3 字符串最小长度</li><li>maxlength: 20 字符串最大长度</li><li>min: 2 数值最小为2</li><li>max: 100 数值最大为100</li><li>enum: [‘html’, ‘css’, ‘javascript’, ‘node.js’]</li><li>trim: true 去除字符串两边的空格</li><li>validate: 自定义验证器</li><li>default: 默认值</li></ul><p>获取错误信息：error.errors[‘字段名称’].message</p><h3 id="2-8-集合关联"><a href="#2-8-集合关联" class="headerlink" title="2.8 集合关联"></a>2.8 集合关联</h3><p>通常<code>不同集合的数据之间是有关系的</code>，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联。</p><ul><li>使用id对集合进行关联</li><li>使用populate方法进行关联集合查询</li></ul><img width="80%" src="./images/05.png"><h3 id="2-9-集合关联实现"><a href="#2-9-集合关联实现" class="headerlink" title="2.9 集合关联实现"></a>2.9 集合关联实现</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用户集合</span><span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文章集合</span><span class="token keyword">const</span> Post <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Post'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 使用ID将文章集合和作者集合进行关联</span>    author<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> <span class="token string">'User'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//联合查询</span>Post<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-10-案例：用户信息增删改查"><a href="#2-10-案例：用户信息增删改查" class="headerlink" title="2.10 案例：用户信息增删改查"></a>2.10 案例：用户信息增删改查</h3><ol><li>搭建网站服务器，实现客户端与服务器端的通信</li><li>连接数据库，创建用户集合，向集合中插入文档</li><li>当用户访问/list时，将所有用户信息查询出来</li><li>将用户信息和表格HTML进行拼接并将拼接结果响应回客户端</li><li>当用户访问/add时，呈现表单页面，并实现添加用户信息功能</li><li>当用户访问/modify时，呈现修改页面，并实现修改用户信息功能</li><li>当用户访问/delete时，实现用户删除功能</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2019/05/22/es6/"/>
      <url>/2019/05/22/es6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ES6-相关概念（★★）"><a href="#1-ES6-相关概念（★★）" class="headerlink" title="1 ES6 相关概念（★★）"></a>1 ES6 相关概念（★★）</h2><h3 id="1-1-什么是ES6"><a href="#1-1-什么是ES6" class="headerlink" title="1.1 什么是ES6"></a>1.1 什么是ES6</h3><blockquote><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p></blockquote><p><img src="images/es-version.png" alt=""></p><h3 id="1-2-为什么使用-ES6"><a href="#1-2-为什么使用-ES6" class="headerlink" title="1.2 为什么使用 ES6 ?"></a>1.2 为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="2-ES6-新增语法"><a href="#2-ES6-新增语法" class="headerlink" title="2 ES6 新增语法"></a>2 ES6 新增语法</h2><h3 id="2-1-let（★★★）"><a href="#2-1-let（★★★）" class="headerlink" title="2.1 let（★★★）"></a>2.1 let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="2-1-1-let声明的变量只在所处于的块级有效"><a href="#2-1-1-let声明的变量只在所处于的块级有效" class="headerlink" title="2.1.1 let声明的变量只在所处于的块级有效"></a>2.1.1 let声明的变量只在所处于的块级有效</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><p><strong>注意：</strong> 使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="2-1-2-不存在变量提升"><a href="#2-1-2-不存在变量提升" class="headerlink" title="2.1.2 不存在变量提升"></a>2.1.2 不存在变量提升</h4><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined </span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></code></pre><h4 id="2-1-3-暂时性死区"><a href="#2-1-3-暂时性死区" class="headerlink" title="2.1.3 暂时性死区"></a>2.1.3 暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>  <span class="token punctuation">}</span> </code></pre><h4 id="2-1-4-经典面试题"><a href="#2-1-4-经典面试题" class="headerlink" title="2.1.4 经典面试题"></a>2.1.4 经典面试题</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="images/let%E9%9D%A2%E8%AF%95%E9%A2%98.png" alt=""></p><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="images/let%E9%9D%A2%E8%AF%95%E9%A2%982.png" alt=""></p><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="2-1-5-小结"><a href="#2-1-5-小结" class="headerlink" title="2.1.5 小结"></a>2.1.5 小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="2-2-const（★★★）"><a href="#2-2-const（★★★）" class="headerlink" title="2.2 const（★★★）"></a>2.2 const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="2-2-1-具有块级作用域"><a href="#2-2-1-具有块级作用域" class="headerlink" title="2.2.1 具有块级作用域"></a>2.2.1 具有块级作用域</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><h4 id="2-2-2-声明常量时必须赋值"><a href="#2-2-2-声明常量时必须赋值" class="headerlink" title="2.2.2 声明常量时必须赋值"></a>2.2.2 声明常量时必须赋值</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Missing initializer in const declaration</span></code></pre><h4 id="2-2-3-常量赋值后，值不能修改"><a href="#2-2-3-常量赋值后，值不能修改" class="headerlink" title="2.2.3 常量赋值后，值不能修改"></a>2.2.3 常量赋值后，值不能修改</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable.</span><span class="token keyword">const</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>ary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b']; </span>ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable.</span></code></pre><h4 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4 小结"></a>2.2.4 小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="2-3-let、const、var-的区别"><a href="#2-3-let、const、var-的区别" class="headerlink" title="2.3 let、const、var 的区别"></a>2.3 let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="images/var&amp;let&amp;const%E5%8C%BA%E5%88%AB.png" alt=""></p><h3 id="2-4-解构赋值（★★★）"><a href="#2-4-解构赋值（★★★）" class="headerlink" title="2.4 解构赋值（★★★）"></a>2.4 解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="2-4-1-数组解构"><a href="#2-4-1-数组解构" class="headerlink" title="2.4.1 数组解构"></a>2.4.1 数组解构</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">//如果解构不成功，变量的值为undefined</span></code></pre><h4 id="2-4-2-对象解构"><a href="#2-4-2-对象解构" class="headerlink" title="2.4.2 对象解构"></a>2.4.2 对象解构</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'zhangsan' </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span> <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> myName<span class="token punctuation">,</span> age<span class="token punctuation">:</span> myAge<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myName myAge 属于别名</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'zhangsan' </span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><h4 id="2-4-3-小结"><a href="#2-4-3-小结" class="headerlink" title="2.4.3 小结"></a>2.4.3 小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="2-5-箭头函数（★★★）"><a href="#2-5-箭头函数（★★★）" class="headerlink" title="2.5 箭头函数（★★★）"></a>2.5 箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//()：代表是函数； =>：必须要的符号，指向哪一个代码块；{}：函数体</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代表把一个函数赋值给fn</span></code></pre><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//es6写法</span> <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> </code></pre><p>如果形参只有一个，可以省略小括号</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> fn <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//es6写法</span> <span class="token keyword">const</span> fn <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">;</span></code></pre><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 是obj对象</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> resFn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-5-1-小结"><a href="#2-5-1-小结" class="headerlink" title="2.5.1 小结"></a>2.5.1 小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul><h4 id="2-5-2-面试题"><a href="#2-5-2-面试题" class="headerlink" title="2.5.2 面试题"></a>2.5.2 面试题</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></code></pre><h3 id="2-6-剩余参数（★★）"><a href="#2-6-剩余参数（★★）" class="headerlink" title="2.6 剩余参数（★★）"></a>2.6 剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> sum <span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [20, 30] </span> <span class="token punctuation">}</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></code></pre><h4 id="2-6-1-剩余参数和解构配合使用"><a href="#2-6-1-剩余参数和解构配合使用" class="headerlink" title="2.6.1 剩余参数和解构配合使用"></a>2.6.1 剩余参数和解构配合使用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span> <span class="token operator">...</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> students<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 'wangwu' </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ['zhangsan', 'lisi']</span></code></pre><h2 id="3-ES6-的内置对象扩展"><a href="#3-ES6-的内置对象扩展" class="headerlink" title="3 ES6 的内置对象扩展"></a>3 ES6 的内置对象扩展</h2><h3 id="3-1-Array-的扩展方法（★★）"><a href="#3-1-Array-的扩展方法（★★）" class="headerlink" title="3.1 Array 的扩展方法（★★）"></a>3.1 Array 的扩展方法（★★）</h3><h4 id="3-1-1-扩展运算符（展开语法）"><a href="#3-1-1-扩展运算符（展开语法）" class="headerlink" title="3.1.1 扩展运算符（展开语法）"></a>3.1.1 扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">...</span>ary  <span class="token comment" spellcheck="true">// 1, 2, 3</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1 2 3,相当于下面的代码</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-1-1-1-扩展运算符可以应用于合并数组"><a href="#3-1-1-1-扩展运算符可以应用于合并数组" class="headerlink" title="3.1.1.1 扩展运算符可以应用于合并数组"></a>3.1.1.1 扩展运算符可以应用于合并数组</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一 </span> <span class="token keyword">let</span> ary1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ary2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> ary3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>ary1<span class="token punctuation">,</span> <span class="token operator">...</span>ary2<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法二 </span> ary1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>ary2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-1-1-1-将类数组或可遍历对象转换为真正的数组"><a href="#3-1-1-1-将类数组或可遍历对象转换为真正的数组" class="headerlink" title="3.1.1.1 将类数组或可遍历对象转换为真正的数组"></a>3.1.1.1 将类数组或可遍历对象转换为真正的数组</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> oDivs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oDivs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oDivs<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="3-1-2-构造函数方法：Array-from"><a href="#3-1-2-构造函数方法：Array-from" class="headerlink" title="3.1.2 构造函数方法：Array.from()"></a>3.1.2 构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个集合</span><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转成数组</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span></code></pre><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token string">"length"</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> newAry <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[2,4]</span></code></pre><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="3-1-3-实例方法：find"><a href="#3-1-3-实例方法：find" class="headerlink" title="3.1.3 实例方法：find()"></a>3.1.3 实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>     id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'张三'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     name<span class="token punctuation">:</span> <span class="token string">'李四'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> target <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></code></pre><h4 id="3-1-4-实例方法：findIndex"><a href="#3-1-4-实例方法：findIndex" class="headerlink" title="3.1.4 实例方法：findIndex()"></a>3.1.4 实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h4 id="3-1-5-实例方法：includes"><a href="#3-1-5-实例方法：includes" class="headerlink" title="3.1.5 实例方法：includes()"></a>3.1.5 实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h3 id="3-2-String-的扩展方法"><a href="#3-2-String-的扩展方法" class="headerlink" title="3.2 String 的扩展方法"></a>3.2 String 的扩展方法</h3><h4 id="3-2-1-模板字符串（★★★）"><a href="#3-2-1-模板字符串（★★★）" class="headerlink" title="3.2.1 模板字符串（★★★）"></a>3.2.1 模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token string">`zhangsan`</span></span><span class="token punctuation">;</span></code></pre><h5 id="3-2-1-1-模板字符串中可以解析变量"><a href="#3-2-1-1-模板字符串中可以解析变量" class="headerlink" title="3.2.1.1 模板字符串中可以解析变量"></a>3.2.1.1 模板字符串中可以解析变量</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello, my name is zhangsan</span></code></pre><h5 id="3-2-1-2-模板字符串中可以换行"><a href="#3-2-1-2-模板字符串中可以换行" class="headerlink" title="3.2.1.2 模板字符串中可以换行"></a>3.2.1.2 模板字符串中可以换行</h5><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     sex<span class="token punctuation">:</span> <span class="token string">'男'</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">` &lt;div>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>     &lt;span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span> &lt;/div> `</span></span><span class="token punctuation">;</span></code></pre><h5 id="3-2-1-3-在模板字符串中可以调用函数"><a href="#3-2-1-3-在模板字符串中可以调用函数" class="headerlink" title="3.2.1.3 在模板字符串中可以调用函数"></a>3.2.1.3 在模板字符串中可以调用函数</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'哈哈哈哈 追不到我吧 我就是这么强大'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> greet <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 哈哈哈哈`</span></span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></code></pre><h4 id="3-2-2-实例方法：startsWith-和-endsWith"><a href="#3-2-2-实例方法：startsWith-和-endsWith" class="headerlink" title="3.2.2 实例方法：startsWith() 和 endsWith()"></a>3.2.2 实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="3-2-3-实例方法：repeat"><a href="#3-2-3-实例方法：repeat" class="headerlink" title="3.2.3 实例方法：repeat()"></a>3.2.3 实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'x'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// "xxx" </span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// "hellohello"</span></code></pre><h3 id="3-3-Set-数据结构（★★）"><a href="#3-3-Set-数据结构（★★）" class="headerlink" title="3.3 Set 数据结构（★★）"></a>3.3 Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Set函数可以接受一个数组作为参数，用来初始化。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{1, 2, 3, 4}</span></code></pre><h4 id="3-3-1-实例方法"><a href="#3-3-1-实例方法" class="headerlink" title="3.3.1 实例方法"></a>3.3.1 实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向 set 结构中添加值 </span> s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 删除 set 结构中的2值   </span> s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 表示 set 结构中是否有1这个值 返回布尔值 </span> s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 清除 set 结构中的所有值</span> <span class="token comment" spellcheck="true">//注意：删除的是元素的值，不是代表的索引</span></code></pre><h4 id="3-3-2-遍历"><a href="#3-3-2-遍历" class="headerlink" title="3.3.2 遍历"></a>3.3.2 遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><pre class=" language-javascript"><code class="language-javascript">s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/05/15/zheng-ze-biao-da-shi/"/>
      <url>/2019/05/15/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1. 正则表达式概述"></a>1. 正则表达式概述</h2><h3 id="1-1-什么是正则表达式"><a href="#1-1-什么是正则表达式" class="headerlink" title="1.1 什么是正则表达式"></a>1.1 什么是正则表达式</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><p>其他语言也会使用正则表达式，本阶段我们主要是利用JavaScript 正则表达式完成表单验证。</p><h3 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h3><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如：^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$</li><li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   /^[a-z0-9_-]{3,16}$/</li></ol><h2 id="2-正则表达式在js中的使用"><a href="#2-正则表达式在js中的使用" class="headerlink" title="2. 正则表达式在js中的使用"></a>2. 正则表达式在js中的使用</h2><h3 id="2-1-正则表达式的创建"><a href="#2-1-正则表达式的创建" class="headerlink" title="2.1 正则表达式的创建"></a>2.1 正则表达式的创建</h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p>方式一：通过调用RegExp对象的构造函数创建 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/123/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方式二：利用字面量创建 正则表达式</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/123/</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-测试正则表达式"><a href="#2-2-测试正则表达式" class="headerlink" title="2.2 测试正则表达式"></a>2.2 测试正则表达式</h3><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/123/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配字符中是否出现123  出现结果为true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配字符中是否出现123 未出现结果为false</span></code></pre><p><img src="images/img4.png" alt=""></p><h2 id="3-正则表达式中的特殊字符"><a href="#3-正则表达式中的特殊字符" class="headerlink" title="3. 正则表达式中的特殊字符"></a>3. 正则表达式中的特殊字符</h2><h3 id="3-1-正则表达式的组成"><a href="#3-1-正则表达式的组成" class="headerlink" title="3.1 正则表达式的组成"></a>3.1 正则表达式的组成</h3><p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN</a></p><p>jQuery 手册：正则表达式部分</p><p><a href="<http://tool.oschina.net/regex">正则测试工具</a></p><h3 id="3-2-边界符"><a href="#3-2-边界符" class="headerlink" title="3.2 边界符"></a>3.2 边界符</h3><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/abc/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span><span class="token comment" spellcheck="true">// /abc/ 只要包含有abc这个字符串返回的都是true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^abc/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^abc$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 精确匹配 要求必须是 abc字符串才符合规范</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aabcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abcabc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h3 id="3-3-字符类"><a href="#3-3-字符类" class="headerlink" title="3.3 字符类"></a>3.3 字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="3-3-1-方括号"><a href="#3-3-1-方括号" class="headerlink" title="3.3.1 [] 方括号"></a>3.3.1 [] 方括号</h4><p>表示有一系列字符可供选择，只要匹配其中一个就可以了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> rg <span class="token operator">=</span> <span class="token regex">/[abc]/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">var</span> rg1 <span class="token operator">=</span> <span class="token regex">/^[abc]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>$<span class="token operator">/</span> <span class="token comment" spellcheck="true">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">//字符组合</span><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9]$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment" spellcheck="true">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex">/^[^a-zA-Z0-9]$/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h4 id="3-3-2-量词符"><a href="#3-3-2-量词符" class="headerlink" title="3.3.2 量词符"></a>3.3.2 量词符</h4><p>量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="3-3-3-用户名表单验证"><a href="#3-3-3-用户名表单验证" class="headerlink" title="3.3.3 用户名表单验证"></a>3.3.3 用户名表单验证</h4><p>功能需求:</p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li></ol><p><img src="images/img2.png" alt=""></p><p><img src="images/img1.png" alt=""></p><p>分析:</p><ol><li>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位.</li><li>首先准备好这种正则表达式模式/$[a-zA-Z0-9-_]{6,16}^/</li><li>当表单失去焦点就开始验证. </li><li>如果符合正则规范, 则让后面的span标签添加 right类.</li><li>如果不符合正则规范, 则让后面的span标签添加 wrong类.</li></ol><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"uname"</span><span class="token operator">></span> <span class="token operator">&lt;</span>span<span class="token operator">></span>请输入用户名<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token comment" spellcheck="true">//  量词是设定某个模式出现的次数</span> <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[a-zA-Z0-9_-]{6,16}$/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个模式用户只能输入英文字母 数字 下划线 中划线</span> <span class="token keyword">var</span> uname <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.uname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> uname<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'正确的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'right'</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'用户名格式输入正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'错误的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'wrong'</span><span class="token punctuation">;</span>   span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'用户名格式输入不正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="3-3-4-括号总结"><a href="#3-3-4-括号总结" class="headerlink" title="3.3.4 括号总结"></a>3.3.4 括号总结</h4><p>1.大括号  量词符.  里面表示重复次数</p><p>2.中括号 字符集合。匹配方括号中的任意字符. </p><p>3.小括号表示优先级</p><p><a href="https://c.runoob.com/" target="_blank" rel="noopener">正则表达式在线测试</a></p><h3 id="3-4-预定义类"><a href="#3-4-预定义类" class="headerlink" title="3.4 预定义类"></a>3.4 预定义类</h3><p>预定义类指的是某些常见模式的简写方式.</p><p><img src="images/img3.png" alt=""></p><p><strong>案例:验证座机号码</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^\d{3}-\d{8}|\d{4}-\d{7}$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^\d{3,4}-\d{7,8}$/</span><span class="token punctuation">;</span></code></pre><p><strong>表单验证案例</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//手机号验证:/^1[3|4|5|7|8][0-9]{9}$/;</span><span class="token comment" spellcheck="true">//验证通过与不通过更换元素的类名与元素中的内容</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log('正确的');</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'success'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="success_icon">&lt;/i> 恭喜您输入正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// console.log('不正确');</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="error_icon">&lt;/i>格式不正确,请从新输入 '</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//QQ号验证: /^[1-9]\d{4,}$/; </span><span class="token comment" spellcheck="true">//昵称验证:/^[\u4e00-\u9fa5]{2,8}$/</span><span class="token comment" spellcheck="true">//验证通过与不通过更换元素的类名与元素中的内容 ,将上一步的匹配代码进行封装,多次调用即可</span> <span class="token keyword">function</span> <span class="token function">regexp</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ele<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('正确的');</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'success'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="success_icon">&lt;/i> 恭喜您输入正确'</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// console.log('不正确');</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'error'</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;i class="error_icon">&lt;/i> 格式不正确,请从新输入 '</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//密码验证:/^[a-zA-Z0-9_-]{6,16}$/</span><span class="token comment" spellcheck="true">//再次输入密码只需匹配与上次输入的密码值 是否一致</span></code></pre><h3 id="3-5-正则替换replace"><a href="#3-5-正则替换replace" class="headerlink" title="3.5 正则替换replace"></a>3.5 正则替换replace</h3><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy和red'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">,</span> <span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//baby和red</span><span class="token comment" spellcheck="true">//等同于 此处的andy可以写在正则表达式内</span><span class="token keyword">var</span> newStr2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/andy/</span><span class="token punctuation">,</span> <span class="token string">'baby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//baby和red</span><span class="token comment" spellcheck="true">//全部替换</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abcabc'</span><span class="token keyword">var</span> nStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/</span><span class="token punctuation">,</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//哈哈bcabc</span><span class="token comment" spellcheck="true">//全部替换g</span><span class="token keyword">var</span> nStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>a<span class="token operator">/</span>a<span class="token punctuation">,</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//哈哈bc哈哈bc</span><span class="token comment" spellcheck="true">//忽略大小写i</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'aAbcAba'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/a/gi</span><span class="token punctuation">,</span><span class="token string">'哈哈'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"哈哈哈哈bc哈哈b哈哈"</span></code></pre><p><strong>案例:过滤敏感词汇</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>textarea name<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span> <span class="token operator">&lt;</span>button<span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/激情|sex/g</span><span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端常见布局</title>
      <link href="/2019/05/08/yi-dong-duan-chang-jian-bu-ju/"/>
      <url>/2019/05/08/yi-dong-duan-chang-jian-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="一、流式布局"><a href="#一、流式布局" class="headerlink" title="一、流式布局"></a>一、流式布局</h1><h2 id="1-1-移动端基础"><a href="#1-1-移动端基础" class="headerlink" title="1.1 移动端基础"></a>1.1 移动端基础</h2><h3 id="1-1-1-浏览器现状"><a href="#1-1-1-浏览器现状" class="headerlink" title="1.1.1 浏览器现状"></a>1.1.1 浏览器现状</h3><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h3 id="1-1-2-手机屏幕的现状"><a href="#1-1-2-手机屏幕的现状" class="headerlink" title="1.1.2 手机屏幕的现状"></a>1.1.2 手机屏幕的现状</h3><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h3 id="1-1-3-常见移动端屏幕尺寸"><a href="#1-1-3-常见移动端屏幕尺寸" class="headerlink" title="1.1.3 常见移动端屏幕尺寸"></a>1.1.3 常见移动端屏幕尺寸</h3><img width="80%" src="./images/01-1.jpg"><h3 id="1-1-4-移动端调试方法"><a href="#1-1-4-移动端调试方法" class="headerlink" title="1.1.4 移动端调试方法"></a>1.1.4 移动端调试方法</h3><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h2 id="1-2-视口"><a href="#1-2-视口" class="headerlink" title="1.2 视口"></a>1.2 视口</h2><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h3 id="1-2-1-布局视口-layout-viewport"><a href="#1-2-1-布局视口-layout-viewport" class="headerlink" title="1.2.1 布局视口 layout viewport"></a>1.2.1 布局视口 layout viewport</h3><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><img width="50%" src="./images/01-2.jpg"><h3 id="1-2-2-视觉视口-visual-viewport"><a href="#1-2-2-视觉视口-visual-viewport" class="headerlink" title="1.2.2 视觉视口 visual viewport"></a>1.2.2 视觉视口 visual viewport</h3><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><img width="50%" src="./images/01-3.jpg"><h3 id="1-2-3-理想视口-ideal-viewport"><a href="#1-2-3-理想视口-ideal-viewport" class="headerlink" title="1.2.3 理想视口 ideal viewport"></a>1.2.3 理想视口 ideal viewport</h3><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h3 id="1-2-4-meta标签"><a href="#1-2-4-meta标签" class="headerlink" title="1.2.4 meta标签"></a>1.2.4 meta标签</h3><img width="80%" src="./images/01-4.jpg"><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h2 id="1-3-二倍图"><a href="#1-3-二倍图" class="headerlink" title="1.3 二倍图"></a>1.3 二倍图</h2><h3 id="1-3-1-物理像素-amp-物理像素比"><a href="#1-3-1-物理像素-amp-物理像素比" class="headerlink" title="1.3.1 物理像素&amp;物理像素比"></a>1.3.1 物理像素&amp;物理像素比</h3><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h3 id="1-3-2-背景缩放background-size"><a href="#1-3-2-背景缩放background-size" class="headerlink" title="1.3.2 背景缩放background-size"></a>1.3.2 背景缩放background-size</h3><p>background-size 属性规定背景图像的尺寸</p><pre><code>background-size: 背景图片宽度 背景图片高度;</code></pre><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h2 id="1-4-移动开发选择和技术解决方案"><a href="#1-4-移动开发选择和技术解决方案" class="headerlink" title="1.4 移动开发选择和技术解决方案"></a>1.4 移动开发选择和技术解决方案</h2><h3 id="1-4-1-移动端主流方案"><a href="#1-4-1-移动端主流方案" class="headerlink" title="1.4.1 移动端主流方案"></a>1.4.1 移动端主流方案</h3><ol><li>单独制作移动端页面（主流）</li></ol><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc端的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><img width="80%" src="./images/01-5.jpg"><p>京东移动端：</p><img width="50%" src="./images/01-6.jpg"><ol start="2"><li>响应式页面兼容移动端（其次）</li></ol><img width="50%" src="./images/01-7.jpg"><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h3 id="1-4-2-移动端技术解决方案"><a href="#1-4-2-移动端技术解决方案" class="headerlink" title="1.4.2 移动端技术解决方案"></a>1.4.2 移动端技术解决方案</h3><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。<br>我们可以放心使用 H5 标签和 CSS3 样式。<br>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/，官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><ul><li>Normalize.css：保护了有价值的默认值</li><li>Normalize.css：修复了浏览器的bug</li><li>Normalize.css：是模块化的</li><li>Normalize.css：拥有详细的文档</li></ul><h3 id="1-4-3-移动端大量使用-CSS3盒子模型box-sizing"><a href="#1-4-3-移动端大量使用-CSS3盒子模型box-sizing" class="headerlink" title="1.4.3 移动端大量使用 CSS3盒子模型box-sizing"></a>1.4.3 移动端大量使用 CSS3盒子模型box-sizing</h3><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding<br>CSS3盒子模型：盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding<br>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*传统盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span></code></pre><p>移动端可以全部CSS3 盒子模型<br>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h3 id="1-4-4-移动端特殊样式"><a href="#1-4-4-移动端特殊样式" class="headerlink" title="1.4.4 移动端特殊样式"></a>1.4.4 移动端特殊样式</h3><pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span>    <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span>    <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*禁用长按页面时的弹出菜单*/</span>    <span class="token selector">img,a </span><span class="token punctuation">{</span> <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="1-5-移动端常见布局"><a href="#1-5-移动端常见布局" class="headerlink" title="1.5 移动端常见布局"></a>1.5 移动端常见布局</h2><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。<br>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。<br>流式布局方式是移动web开发使用的比较常见的布局方式。</p><h1 id="二、flex布局"><a href="#二、flex布局" class="headerlink" title="二、flex布局"></a>二、flex布局</h1><h2 id="2-1-传统布局和flex布局对比"><a href="#2-1-传统布局和flex布局对比" class="headerlink" title="2.1 传统布局和flex布局对比"></a>2.1 传统布局和flex布局对比</h2><h3 id="2-1-1-传统布局"><a href="#2-1-1-传统布局" class="headerlink" title="2.1.1 传统布局"></a>2.1.1 传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h3 id="2-1-2-flex布局"><a href="#2-1-2-flex布局" class="headerlink" title="2.1.2 flex布局"></a>2.1.2 flex布局</h3><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul><h3 id="2-1-3-建议"><a href="#2-1-3-建议" class="headerlink" title="2.1.3 建议"></a>2.1.3 建议</h3><ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul><h2 id="2-2-flex布局原理"><a href="#2-2-flex布局原理" class="headerlink" title="2.2 flex布局原理"></a>2.2 flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 </li><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</li></ul><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id="2-3-父项常见属性"><a href="#2-3-父项常见属性" class="headerlink" title="2.3 父项常见属性"></a>2.3 父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行  </li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="2-3-1-flex-direction设置主轴的方向"><a href="#2-3-1-flex-direction设置主轴的方向" class="headerlink" title="2.3.1 flex-direction设置主轴的方向"></a>2.3.1 flex-direction设置主轴的方向</h3><ul><li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</li><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ul><img width="80%" src="./images/02-1.jpg"><ul><li><p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p><img width="80%" src="./images/02-2.jpg"></li></ul><h3 id="2-3-2-justify-content-设置主轴上的子元素排列方式"><a href="#2-3-2-justify-content-设置主轴上的子元素排列方式" class="headerlink" title="2.3.2 justify-content 设置主轴上的子元素排列方式"></a>2.3.2 justify-content 设置主轴上的子元素排列方式</h3><img width="80%" src="./images/02-3.jpg"><h3 id="2-3-3-flex-wrap设置是否换行"><a href="#2-3-3-flex-wrap设置是否换行" class="headerlink" title="2.3.3 flex-wrap设置是否换行"></a>2.3.3 flex-wrap设置是否换行</h3><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h3 id="2-3-4-align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#2-3-4-align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="2.3.4 align-items 设置侧轴上的子元素排列方式（单行 ）"></a>2.3.4 align-items 设置侧轴上的子元素排列方式（单行 ）</h3><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式  在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h3 id="2-3-5-align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#2-3-5-align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="2.3.5 align-content  设置侧轴上的子元素的排列方式（多行）"></a>2.3.5 align-content  设置侧轴上的子元素的排列方式（多行）</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</p><img width="80%" src="./images/02-4.jpg"><h3 id="2-3-6-align-content-和align-items区别"><a href="#2-3-6-align-content-和align-items区别" class="headerlink" title="2.3.6 align-content 和align-items区别"></a>2.3.6 align-content 和align-items区别</h3><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 </li><li>总结就是单行找align-items  多行找 align-content</li></ul><h3 id="2-3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#2-3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="2.3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>2.3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h3><pre><code>flex-flow:row wrap;</code></pre><h2 id="2-4-flex布局子项常见属性"><a href="#2-4-flex布局子项常见属性" class="headerlink" title="2.4 flex布局子项常见属性"></a>2.4 flex布局子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="2-4-1-flex-属性"><a href="#2-4-1-flex-属性" class="headerlink" title="2.4.1  flex 属性"></a>2.4.1  flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 默认值 0 */</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-2-align-self控制子项自己在侧轴上的排列方式"><a href="#2-4-2-align-self控制子项自己在侧轴上的排列方式" class="headerlink" title="2.4.2 align-self控制子项自己在侧轴上的排列方式"></a>2.4.2 align-self控制子项自己在侧轴上的排列方式</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><pre class=" language-css"><code class="language-css"><span class="token selector">span<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 设置自己在侧轴上的排列方式 */</span>      <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-3-order-属性定义项目的排列顺序"><a href="#2-4-3-order-属性定义项目的排列顺序" class="headerlink" title="2.4.3 order 属性定义项目的排列顺序"></a>2.4.3 order 属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">order</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-5-携程网首页案例制作"><a href="#2-5-携程网首页案例制作" class="headerlink" title="2.5 携程网首页案例制作"></a>2.5 携程网首页案例制作</h2><p>携程网链接：<a href="http://m.ctrip.com" target="_blank" rel="noopener">http://m.ctrip.com</a></p><ol><li>技术选型</li></ol><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取flex布局</p><ol start="2"><li>搭建相关文件夹</li></ol><img width="50%" src="./images/02-5.jpg"><ol start="3"><li>设置视口标签以及引入初始化样式</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no,initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/normalize.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>常用初始化样式</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">540</span>px<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">font</span><span class="token punctuation">:</span> normal <span class="token number">14</span>px/<span class="token number">1.5</span> Tahoma,<span class="token string">"Lucida Grande"</span>,Verdana,<span class="token string">"Microsoft Yahei"</span>,STXihei,hei<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f2f2f2</span><span class="token punctuation">;</span>  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>模块名字划分</li></ol><img width="80%" src="./images/02-6.jpg"><h1 id="三、rem布局"><a href="#三、rem布局" class="headerlink" title="三、rem布局"></a>三、rem布局</h1><h2 id="3-1-rem基础"><a href="#3-1-rem基础" class="headerlink" title="3.1 rem基础"></a>3.1 rem基础</h2><h3 id="3-1-1-rem单位"><a href="#3-1-1-rem单位" class="headerlink" title="3.1.1 rem单位"></a>3.1.1 rem单位</h3><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</p><p>不同的是rem的基准是相对于html元素的字体大小。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 根html 为 12px */</span><span class="token selector">html </span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 此时 div 的字体大小就是 24px */</span>       <span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><h2 id="3-2-媒体查询"><a href="#3-2-媒体查询" class="headerlink" title="3.2 媒体查询"></a>3.2 媒体查询</h2><h3 id="3-2-1-什么是媒体查询"><a href="#3-2-1-什么是媒体查询" class="headerlink" title="3.2.1 什么是媒体查询"></a>3.2.1 什么是媒体查询</h3><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面 </li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><h3 id="3-2-2-媒体查询语法规范"><a href="#3-2-2-媒体查询语法规范" class="headerlink" title="3.2.2 媒体查询语法规范"></a>3.2.2 媒体查询语法规范</h3><ul><li>用 @media开头 注意@符号</li><li>mediatype  媒体类型</li><li>关键字 and  not  only</li><li>media feature 媒体特性必须有小括号包含</li></ul><pre><code>@media mediatype and|not|only (media feature) {    CSS-Code;}</code></pre><ol><li>mediatype 查询类型</li></ol><p>​       将不同的终端设备划分成不同的类型，称为媒体类型</p><img width="80%" src="./images/03-1.jpg"><ol start="2"><li>关键字</li></ol><p>​       关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。    </li></ul><ol start="3"><li><p>媒体特性</p><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。</p><p>注意他们要加小括号包含</p><img width="80%" src="./images/03-2.jpg"></li><li><p>媒体查询书写规则</p><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p><img width="80%" src="./images/03-3.jpg"></li></ol><h2 id="3-3-less-基础"><a href="#3-3-less-基础" class="headerlink" title="3.3 less 基础"></a>3.3 less 基础</h2><h3 id="3-3-1-维护css弊端"><a href="#3-3-1-维护css弊端" class="headerlink" title="3.3.1 维护css弊端"></a>3.3.1 维护css弊端</h3><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。 </li></ul><h3 id="3-3-2-Less-介绍"><a href="#3-3-2-Less-介绍" class="headerlink" title="3.3.2 Less 介绍"></a>3.3.2 Less 介绍</h3><p>Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。</p><p>做为 CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。</p><p>它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p><p>Less中文网址：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p><p>常见的CSS预处理器：Sass、Less、Stylus</p><p>一句话：Less是一门 CSS 预处理语言，它扩展了CSS的动态特性。</p><p>Less安装</p><p>①安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd）  —输入“node –v”查看版本即可</p><p>③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可</p><p>④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p><p>Less 使用之变量</p><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><pre><code>@变量名:值;</code></pre><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><pre><code>@color: pink;</code></pre><p>Less 编译 vocode Less 插件</p><p>Easy LESS 插件用来把less文件编译为css文件</p><p>安装完毕插件，重新加载下 vscode。</p><p>只要保存一下Less文件，会自动生成CSS文件。</p><img width="80%" src="./images/03-4.jpg"><p>Less 嵌套</p><pre class=" language-css"><code class="language-css"><span class="token selector">// 将css改为less<span class="token id">#header</span> <span class="token class">.logo</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#header</span> </span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.logo</span> </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><pre><code>a:hover{    color:red;}a{  &amp;:hover{      color:red;  }}</code></pre><p>Less 运算</p><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><pre><code>/*Less 里面写*/@witdh: 10px + 5;div {    border: @witdh solid red;}/*生成的css*/div {  border: 15px solid red;}/*Less 甚至还可以这样 */width: (@width + 5) * 2;</code></pre><ul><li>乘号（*）和除号（/）的写法  </li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h2 id="3-4-rem适配方案"><a href="#3-4-rem适配方案" class="headerlink" title="3.4 rem适配方案"></a>3.4 rem适配方案</h2><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><p>技术方案：</p><ol><li>less+rem+媒体查询</li><li>lflexible.js+rem</li></ol><p>总结： </p><p>两种方案现在都存在。</p><p>方案2 更简单，现阶段大家无需了解里面的js代码。</p><h3 id="3-4-1-rem实际开发适配方案1"><a href="#3-4-1-rem实际开发适配方案1" class="headerlink" title="3.4.1 rem实际开发适配方案1"></a>3.4.1 rem实际开发适配方案1</h3><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100<em>100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem</em>2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h2 id="3-5-苏宁首页"><a href="#3-5-苏宁首页" class="headerlink" title="3.5 苏宁首页"></a>3.5 苏宁首页</h2><p>苏宁首页地址 ：<a href="m.suning.com">苏宁首页</a></p><p>1、 技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取rem适配布局（less + rem  + 媒体查询）</p><p>设计图： 本设计图采用 750px 设计尺寸</p><p>2、搭建文件结构</p><img width="50%" src="./images/03-5.jpg"><p>3、设置视口标签以及引入初始化样式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no,         initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/normalize.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>4、设置公共common.less文件</p><ul><li>新建common.less    设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要</li><li>我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li><li>划分的份数我们定为 15等份</li><li>因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面</li></ul><h2 id="3-6-rem-适配方案2"><a href="#3-6-rem-适配方案2" class="headerlink" title="3.6 rem 适配方案2"></a>3.6 rem 适配方案2</h2><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p>里面页面元素rem值： 页面元素的px 值 /  75  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><img width="80%" src="./images/03-6.jpg"><img width="80%" src="./images/03-7.jpg"><h1 id="四、响应式布局"><a href="#四、响应式布局" class="headerlink" title="四、响应式布局"></a>四、响应式布局</h1><h2 id="4-1-响应式开发原理"><a href="#4-1-响应式开发原理" class="headerlink" title="4.1 响应式开发原理"></a>4.1 响应式开发原理</h2><h3 id="4-1-1-响应式开发原理"><a href="#4-1-1-响应式开发原理" class="headerlink" title="4.1.1 响应式开发原理"></a>4.1.1 响应式开发原理</h3><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）</li></ul><h3 id="4-1-2-响应式布局容器"><a href="#4-1-2-响应式布局容器" class="headerlink" title="4.1.2 响应式布局容器"></a>4.1.2 响应式布局容器</h3><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h2 id="4-2-bootstrap的介绍"><a href="#4-2-bootstrap的介绍" class="headerlink" title="4.2 bootstrap的介绍"></a>4.2 bootstrap的介绍</h2><h3 id="4-2-1-Bootstrap简介"><a href="#4-2-1-Bootstrap简介" class="headerlink" title="4.2.1 Bootstrap简介"></a>4.2.1 Bootstrap简介</h3><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/">中文网</a>  <a href="lhttp://getbootstrap.com/">官网</a>  <a href="https://v3.bootcss.com/" target="_blank" rel="noopener">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h3 id="4-2-2-bootstrap优点"><a href="#4-2-2-bootstrap优点" class="headerlink" title="4.2.2 bootstrap优点"></a>4.2.2 bootstrap优点</h3><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h3 id="4-2-3-版本简介"><a href="#4-2-3-版本简介" class="headerlink" title="4.2.3 版本简介"></a>4.2.3 版本简介</h3><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h3 id="4-2-4-bootstrap基本使用"><a href="#4-2-4-bootstrap基本使用" class="headerlink" title="4.2.4 bootstrap基本使用"></a>4.2.4 bootstrap基本使用</h3><p>在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。</p><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  </p><p><img src="./images/04-1.jpg" alt=""></p></li><li><p>创建 html 骨架结构 </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Bootstrap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --></span>    <span class="token comment" spellcheck="true">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --></span>    <span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js">&lt;/script>      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js">&lt;/script>    &lt;![endif]--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/jquery/1.11.3/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Include all compiled plugins (below), or include individual files as needed --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>​</p></li><li><p>引入相关样式文件  </p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Bootstrap 核心样式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>​</p></li><li><p>书写内容 </p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h3 id="4-2-5-bootstrap布局容器"><a href="#4-2-5-bootstrap布局容器" class="headerlink" title="4.2.5 bootstrap布局容器"></a>4.2.5 bootstrap布局容器</h3><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 或者<code>.container-fluid</code> 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1170px</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h3 id="4-2-6-bootstrap栅格系统"><a href="#4-2-6-bootstrap栅格系统" class="headerlink" title="4.2.6 bootstrap栅格系统"></a>4.2.6 bootstrap栅格系统</h3><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p>栅格嵌套</p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*<br>元素内。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 列嵌套 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>列偏移</p><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><pre><code> &lt;!-- 列偏移 --&gt;  &lt;div class="row"&gt;      &lt;div class="col-lg-4"&gt;1&lt;/div&gt;      &lt;div class="col-lg-4 col-lg-offset-4"&gt;2&lt;/div&gt;  &lt;/div&gt;</code></pre><p>列排序</p><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序。</p><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 列排序 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-4 col-lg-push-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-8 col-lg-pull-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>响应式工具</p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><p><img src="./images/04-2.jpg" alt=""></p><h2 id="4-3-阿里百秀案例制作"><a href="#4-3-阿里百秀案例制作" class="headerlink" title="4.3 阿里百秀案例制作"></a>4.3 阿里百秀案例制作</h2><h3 id="4-3-1-技术选型"><a href="#4-3-1-技术选型" class="headerlink" title="4.3.1 技术选型"></a>4.3.1 技术选型</h3><p>方案：我们采取响应式页面开发方案</p><p>技术：bootstrap框架</p><p>设计图： 本设计图采用 1280px 设计尺寸</p><p>项目结构搭建</p><p>Bootstrap 使用四步曲： </p><ol><li>创建文件夹结构</li><li>创建 html 骨架结构  </li><li>引入相关样式文件  </li><li>书写内容 </li></ol><p>container宽度修改</p><p>因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度</p><pre class=" language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/* 利用媒体查询修改 container宽度适合效果图宽度  */</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>     <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1280</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5CSS3</title>
      <link href="/2019/05/01/html5css3/"/>
      <url>/2019/05/01/html5css3/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5CSS3"><a href="#HTML5CSS3" class="headerlink" title="HTML5CSS3"></a>HTML5CSS3</h1><h2 id="一、什么是-HTML5"><a href="#一、什么是-HTML5" class="headerlink" title="一、什么是 HTML5"></a>一、什么是 <code>HTML5</code></h2><h3 id="1-HTML5-的概念与定义"><a href="#1-HTML5-的概念与定义" class="headerlink" title="1. HTML5 的概念与定义"></a>1. <code>HTML5</code> 的概念与定义</h3><ul><li>定义：<code>HTML5</code> 定义了 <code>HTML</code> 标准的最新版本，是对 <code>HTML</code> 的第五次重大修改，号称下一代的 <code>HTML</code> </li><li>两个概念：<ul><li>是一个新版本的 <code>HTML</code> 语言，定义了新的标签、特性和属性</li><li>拥有一个强大的技术集，这些技术集是指： <code>HTML5</code> 、<code>CSS3</code> 、<code>javascript</code>, 这也是广义上的 <code>HTML5</code></li></ul></li></ul><h3 id="2-HTML5-拓展了哪些内容"><a href="#2-HTML5-拓展了哪些内容" class="headerlink" title="2. HTML5 拓展了哪些内容"></a>2. <code>HTML5</code> 拓展了哪些内容</h3><ul><li>语义化标签</li><li>本地存储</li><li>兼容特性</li><li><code>2D</code>、<code>3D</code> </li><li>动画、过渡</li><li><code>CSS3</code> 特性</li><li>性能与集成</li></ul><h3 id="3-HTML5-的现状"><a href="#3-HTML5-的现状" class="headerlink" title="3. HTML5 的现状"></a>3. <code>HTML5</code> 的现状</h3><p>绝对多数新的属性，都已经被浏览器所支持，最新版本的浏览器已经开始陆续支持最新的特性，<br>总的来说：<code>HTML5</code> 已经是大势所趋</p><h2 id="二、HTML5-新增标签"><a href="#二、HTML5-新增标签" class="headerlink" title="二、HTML5 新增标签"></a>二、<code>HTML5</code> 新增标签</h2><h3 id="1-什么是语义化"><a href="#1-什么是语义化" class="headerlink" title="1. 什么是语义化"></a>1. 什么是语义化</h3><blockquote><p>用最恰当的标签来标记内容</p></blockquote><h3 id="2-新增了那些语义化标签"><a href="#2-新增了那些语义化标签" class="headerlink" title="2. 新增了那些语义化标签"></a>2. 新增了那些语义化标签</h3><ul><li><code>header</code>   —  头部标签</li><li><code>nav</code>       —  导航标签</li><li><code>article</code> —   内容标签</li><li><code>section</code> —   块级标签</li><li><code>aside</code>    —   侧边栏标签</li><li><code>footer</code>   —   尾部标签</li></ul><img width="80%" src="images\yuyibq.png"><h3 id="3-使用语义化标签的注意"><a href="#3-使用语义化标签的注意" class="headerlink" title="3. 使用语义化标签的注意"></a>3. 使用语义化标签的注意</h3><ul><li>语义化标签主要针对搜索引擎</li><li>新标签可以使用一次或者多次</li><li>在 <code>IE9</code> 浏览器中，需要把语义化标签都转换为块级元素</li><li>语义化标签，在移动端支持比较友好，</li><li>另外，<code>HTML5</code> 新增的了很多的语义化标签，随着课程深入，还会学习到其他的</li></ul><h2 id="三、多媒体音频标签"><a href="#三、多媒体音频标签" class="headerlink" title="三、多媒体音频标签"></a>三、多媒体音频标签</h2><h3 id="1-多媒体标签有两个，分别是"><a href="#1-多媒体标签有两个，分别是" class="headerlink" title="1. 多媒体标签有两个，分别是"></a>1. 多媒体标签有两个，分别是</h3><ul><li>音频  – <code>audio</code></li><li>视频  – <code>video</code></li></ul><h3 id="2-audio-标签说明"><a href="#2-audio-标签说明" class="headerlink" title="2. audio 标签说明"></a>2. <code>audio</code> 标签说明</h3><ul><li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li><li>但是：播放格式是有限的</li></ul><h3 id="3-audio-支持的音频格式"><a href="#3-audio-支持的音频格式" class="headerlink" title="3. audio 支持的音频格式"></a>3. audio 支持的音频格式</h3><ul><li>audio 目前支持三种格式</li></ul><img width="80%" src="images\audio.png"><h3 id="4-audio-的参数"><a href="#4-audio-的参数" class="headerlink" title="4. audio 的参数"></a>4. audio 的参数</h3><img width="80%" src="images\audiocanshu.png"><h3 id="5-audio-代码演示"><a href="#5-audio-代码演示" class="headerlink" title="5. audio 代码演示"></a>5. audio 代码演示</h3><pre class=" language-css"><code class="language-css">&lt;body>  &lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 -->  &lt;!-- &lt;audio src=<span class="token string">"./media/snow.mp3"</span> controls autoplay>&lt;/audio> -->  &lt;!--     因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件   -->  &lt;audio controls>    &lt;source src=<span class="token string">"./media/snow.mp3"</span> type=<span class="token string">"audio/mpeg"</span> />  &lt;/audio>&lt;/body></code></pre><h2 id="四、多媒体视频标签"><a href="#四、多媒体视频标签" class="headerlink" title="四、多媒体视频标签"></a>四、多媒体视频标签</h2><h3 id="1-video-视频标签"><a href="#1-video-视频标签" class="headerlink" title="1. video 视频标签"></a>1. video 视频标签</h3><ul><li>目前支持三种格式</li></ul><img width="80%" src="images\vedio.png"><h3 id="2-语法格式"><a href="#2-语法格式" class="headerlink" title="2. 语法格式"></a>2. 语法格式</h3><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><h3 id="3-video-参数"><a href="#3-video-参数" class="headerlink" title="3. video 参数"></a>3. video 参数</h3><img width="80%" src="images\videocanshu.png"><h3 id="4-video-代码演示"><a href="#4-video-代码演示" class="headerlink" title="4. video 代码演示"></a>4. video 代码演示</h3><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- &lt;video src="./media/video.mp4" controls="controls">&lt;/video> --></span>     <span class="token comment" spellcheck="true">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/pig.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="5-多媒体标签总结"><a href="#5-多媒体标签总结" class="headerlink" title="5. 多媒体标签总结"></a>5. 多媒体标签总结</h3><ul><li>音频标签与视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都禁止了</li><li>谷歌浏览器中视频添加 muted 标签可以自己播放</li><li>注意：重点记住使用方法以及自动播放即可，其他属性可以在使用时查找对应的手册</li></ul><h2 id="五、新增-input-标签"><a href="#五、新增-input-标签" class="headerlink" title="五、新增 input 标签"></a>五、新增 input 标签</h2><img width="80%" src="images\h5input.png"><h2 id="六、新增表单属性"><a href="#六、新增表单属性" class="headerlink" title="六、新增表单属性"></a>六、新增表单属性</h2><img width="80%" src="images\newinput.png"><h2 id="七、CSS3-属性选择器"><a href="#七、CSS3-属性选择器" class="headerlink" title="七、CSS3 属性选择器"></a>七、<code>CSS3</code> 属性选择器</h2><h3 id="1-什么是-CSS3"><a href="#1-什么是-CSS3" class="headerlink" title="1. 什么是 CSS3"></a>1. 什么是 <code>CSS3</code></h3><p>在 <code>CSS2</code> 的基础上拓展、新增的样式</p><h3 id="2-CSS3-发展现状"><a href="#2-CSS3-发展现状" class="headerlink" title="2. CSS3 发展现状"></a>2. <code>CSS3</code> 发展现状</h3><ul><li>移动端支持优于 <code>PC</code> 端</li><li><code>CSS3</code> 目前还草案，在不断改进中</li><li><code>CSS3</code> 相对 <code>H5</code>，应用非常广泛</li></ul><h3 id="3-属性选择器列表"><a href="#3-属性选择器列表" class="headerlink" title="3. 属性选择器列表"></a>3. 属性选择器列表</h3><img width="80%" src="images\attrcanshu.png"><h3 id="4-属性选择器代码演示1"><a href="#4-属性选择器代码演示1" class="headerlink" title="4. 属性选择器代码演示1"></a>4. 属性选择器代码演示1</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">button </span><span class="token punctuation">{</span>     <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">button<span class="token attribute">[disabled]</span> </span><span class="token punctuation">{</span>     <span class="token property">cursor</span><span class="token punctuation">:</span> default   <span class="token punctuation">}</span></code></pre><h3 id="5-属性选择器代码演示2"><a href="#5-属性选择器代码演示2" class="headerlink" title="5. 属性选择器代码演示2"></a>5. 属性选择器代码演示2</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">input<span class="token attribute">[type=search]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">span<span class="token attribute">[class^=black]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">span<span class="token attribute">[class$=black]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">span<span class="token attribute">[class*=black]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="八、结构伪类选择器"><a href="#八、结构伪类选择器" class="headerlink" title="八、结构伪类选择器"></a>八、结构伪类选择器</h2><h3 id="1-属性列表"><a href="#1-属性列表" class="headerlink" title="1. 属性列表"></a>1. 属性列表</h3><img width="80%" src="images\jiegouweilei.png"><h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">ul li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">ul li<span class="token pseudo-class">:last-child</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">ul li<span class="token pseudo-class">:nth-child(3)</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="九、nth-child-参数详解"><a href="#九、nth-child-参数详解" class="headerlink" title="九、nth-child 参数详解"></a>九、<code>nth-child</code> 参数详解</h2><h3 id="1-nth-child-详解"><a href="#1-nth-child-详解" class="headerlink" title="1. nth-child 详解"></a>1. nth-child 详解</h3><ul><li><p>注意：本质上就是选中第几个子元素</p></li><li><p>n 可以是数字、关键字、公式</p></li><li><p>n 如果是数字，就是选中第几个</p></li><li><p>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</p></li><li><p>常见的公式如下(如果 n 是公式，则从 0 开始计算)</p></li><li><p>但是第 0 个元素或者超出了元素的个数会被忽略</p></li></ul><img width="80%" src="images\nthchildcanshu.png"><h3 id="2-代码演示-1"><a href="#2-代码演示-1" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   &lt;style>     <span class="token comment" spellcheck="true">/* 偶数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(even)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 奇数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(odd)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/*n 是公式，从 0 开始计算 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(n)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 偶数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2n)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 奇数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2n + 1)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 选择第 0 5 10 15, 应该怎么选 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(5n)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* n + 5 就是从第5个开始往后选择 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(n + 5)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> peru<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* -n + 5 前五个 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(-n + 5)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> tan<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   &lt;/style></code></pre><h2 id="十、nth-child-和-nt-of-type-的区别"><a href="#十、nth-child-和-nt-of-type-的区别" class="headerlink" title="十、nth-child 和  nt-of-type 的区别"></a>十、<code>nth-child</code> 和  <code>nt-of-type</code> 的区别</h2><h3 id="1-代码演示"><a href="#1-代码演示" class="headerlink" title="1. 代码演示"></a>1. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">&lt;style>     div <span class="token pseudo-class">:nth-child(1)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">div <span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">div span<span class="token pseudo-class">:nth-of-type(2)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">div span<span class="token pseudo-class">:nth-of-type(3)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   &lt;/style></code></pre><h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h3><ul><li><code>nth-child</code>  选择父元素里面的第几个子元素，不管是第几个类型</li><li><code>nt-of-type</code>  选择指定类型的元素</li></ul><h2 id="十一、伪元素选择器"><a href="#十一、伪元素选择器" class="headerlink" title="十一、伪元素选择器"></a>十一、伪元素选择器</h2><h3 id="1-伪类选择器"><a href="#1-伪类选择器" class="headerlink" title="1. 伪类选择器"></a>1. 伪类选择器</h3><img width="80%" src="images\weiyuansu.png"><h3 id="2-伪类选择器注意事项"><a href="#2-伪类选择器注意事项" class="headerlink" title="2. 伪类选择器注意事项"></a>2. 伪类选择器注意事项</h3><ul><li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li><li><code>before</code> 在内容前面，<code>after</code> 在内容后面</li><li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul><h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">&lt;style>       div </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightcoral<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">div<span class="token pseudo-element">::after</span>,       div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'德'</span><span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'道'</span><span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> mediumaquamarine<span class="token punctuation">;</span>       <span class="token punctuation">}</span>     &lt;/style></code></pre><h3 id="4-案例-添加字体图标"><a href="#4-案例-添加字体图标" class="headerlink" title="4. 案例:添加字体图标"></a>4. 案例:添加字体图标</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">p </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightseagreen<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">p<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>     <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\ea50'</span><span class="token punctuation">;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>     <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>     <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>     <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="十二、2D-转换之-translate"><a href="#十二、2D-转换之-translate" class="headerlink" title="十二、2D 转换之 translate"></a>十二、<code>2D</code> 转换之 <code>translate</code></h2><h3 id="1-2D-转换"><a href="#1-2D-转换" class="headerlink" title="1. 2D 转换"></a>1. <code>2D</code> 转换</h3><ul><li><p><code>2D</code> 转换是改变标签在二维平面上的位置和形状</p></li><li><p>移动： <code>translate</code></p></li><li><p>旋转： <code>rotate</code></p></li><li><p>缩放： <code>scale</code></p></li></ul><h3 id="2-translate-语法"><a href="#2-translate-语法" class="headerlink" title="2. translate 语法"></a>2. <code>translate</code> 语法</h3><ul><li><p>x 就是 x 轴上水平移动</p></li><li><p>y 就是 y 轴上水平移动</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>x, y<span class="token punctuation">)</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token property">transfrom</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre></li></ul><h3 id="3-重点知识点"><a href="#3-重点知识点" class="headerlink" title="3. 重点知识点"></a>3. 重点知识点</h3><ul><li><code>2D</code> 的移动主要是指 水平、垂直方向上的移动</li><li><code>translate</code> 最大的优点就是不影响其他元素的位置</li><li><code>translate</code> 中的100%单位，是相对于本身的宽度和高度来进行计算的</li><li>行内标签没有效果</li></ul><h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 平移 */</span>  <span class="token comment" spellcheck="true">/* 水平垂直移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translate(100px, 100px); */</span>  <span class="token comment" spellcheck="true">/* 水平移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translate(100px, 0) */</span>  <span class="token comment" spellcheck="true">/* 垂直移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translate(0, 100px) */</span>  <span class="token comment" spellcheck="true">/* 水平移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translateX(100px); */</span>  <span class="token comment" spellcheck="true">/* 垂直移动 100px */</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="十三、2D-转换-rotate"><a href="#十三、2D-转换-rotate" class="headerlink" title="十三、2D 转换 rotate"></a>十三、<code>2D 转换 rotate</code></h2><h3 id="1-rotate-旋转"><a href="#1-rotate-旋转" class="headerlink" title="1. rotate 旋转"></a>1. rotate 旋转</h3><ul><li><code>2D</code> 旋转指的是让元素在二维平面内顺时针或者逆时针旋转</li></ul><h3 id="2-rotate-语法"><a href="#2-rotate-语法" class="headerlink" title="2. rotate 语法"></a>2. <code>rotate</code> 语法</h3><pre class=" language-css"><code class="language-css">   <span class="token comment" spellcheck="true">/* 单位是：deg */</span>   <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>度数<span class="token punctuation">)</span> </code></pre><h3 id="3-重点知识点-1"><a href="#3-重点知识点-1" class="headerlink" title="3. 重点知识点"></a>3. 重点知识点</h3><ul><li><code>rotate</code> 里面跟度数，单位是 <code>deg</code></li><li>角度为正时，顺时针，角度为负时，逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h2 id="十四、rotate"><a href="#十四、rotate" class="headerlink" title="十四、rotate"></a>十四、rotate</h2><blockquote><p>2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p></blockquote><p>使用步骤：</p><ol><li>给元素添加转换属性 <code>transform</code></li><li>属性值为 <code>rotate(角度)</code>  如 <code>transform:rotate(30deg)</code>  顺时针方向旋转<strong>30度</strong></li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="十五、设置元素旋转中心点-transform-origin"><a href="#十五、设置元素旋转中心点-transform-origin" class="headerlink" title="十五、设置元素旋转中心点(transform-origin)"></a>十五、设置元素旋转中心点(transform-origin)</h2><h3 id="1-transform-origin-基础语法"><a href="#1-transform-origin-基础语法" class="headerlink" title="1. transform-origin 基础语法"></a>1. <code>transform-origin</code> 基础语法</h3><pre class=" language-css"><code class="language-css">   <span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre><h3 id="2-重要知识点"><a href="#2-重要知识点" class="headerlink" title="2. 重要知识点"></a>2. 重要知识点</h3><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 <code>center</code>  <code>center</code></li><li>还可以给 x y 设置像素或者方位名词(<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>、<code>center</code>)</li></ul><h2 id="十六、2D-转换之-scale"><a href="#十六、2D-转换之-scale" class="headerlink" title="十六、2D 转换之 scale"></a>十六、<code>2D</code> 转换之 <code>scale</code></h2><h3 id="1-scale-的作用"><a href="#1-scale-的作用" class="headerlink" title="1. scale 的作用"></a>1. <code>scale</code> 的作用</h3><p>用来控制元素的放大与缩小</p><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h3><pre class=" language-css"><code class="language-css">   <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x, y<span class="token punctuation">)</span></code></pre><h3 id="3-知识要点"><a href="#3-知识要点" class="headerlink" title="3. 知识要点"></a>3. 知识要点</h3><ul><li>注意，x 与 y 之间使用逗号进行分隔</li><li><code>transform: scale(1, 1)</code>: 宽高都放大一倍，相当于没有放大</li><li><code>transform: scale(2, 2)</code>: 宽和高都放大了二倍</li><li><code>transform: scale(2)</code>: 如果只写了一个参数，第二个参数就和第一个参数一致</li><li><code>transform:scale(0.5, 0.5)</code>: 缩小</li><li><code>scale</code> 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子</li></ul><h3 id="4-代码演示-2"><a href="#4-代码演示-2" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css">    <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 注意，数字是倍数的含义，所以不需要加单位 */</span>        <span class="token comment" spellcheck="true">/* transform: scale(2, 2) */</span>        <span class="token comment" spellcheck="true">/* 实现等比缩放，同时修改宽与高 */</span>        <span class="token comment" spellcheck="true">/* transform: scale(2) */</span>        <span class="token comment" spellcheck="true">/* 小于 1 就等于缩放*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="十七、-2D-转换综合写法以及顺序问题"><a href="#十七、-2D-转换综合写法以及顺序问题" class="headerlink" title="十七、 2D 转换综合写法以及顺序问题"></a>十七、 <code>2D</code> 转换综合写法以及顺序问题</h2><h3 id="1-知识要点"><a href="#1-知识要点" class="headerlink" title="1. 知识要点"></a>1. 知识要点</h3><ul><li>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></li><li>顺序会影响到转换的效果(先旋转会改变坐标轴方向)</li><li>但我们同时有位置或者其他属性的时候，要将位移放到最前面</li></ul><h3 id="2-代码演示-2"><a href="#2-代码演示-2" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">200</span>px, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h2 id="十八、-动画-animation"><a href="#十八、-动画-animation" class="headerlink" title="十八、 动画(animation)"></a>十八、 动画(animation)</h2><h3 id="1-什么是动画"><a href="#1-什么是动画" class="headerlink" title="1. 什么是动画"></a>1. 什么是动画</h3><p>动画是 <code>CSS3</code> 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果</p><h3 id="2-动画的基本使用"><a href="#2-动画的基本使用" class="headerlink" title="2. 动画的基本使用"></a>2. 动画的基本使用</h3><ul><li>先定义动画</li><li>在调用定义好的动画</li></ul><h3 id="3-语法格式-定义动画"><a href="#3-语法格式-定义动画" class="headerlink" title="3. 语法格式(定义动画)"></a>3. 语法格式(定义动画)</h3><pre class=" language-css"><code class="language-css">   <span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>       <span class="token selector">0% </span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">100% </span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="4-语法格式-使用动画"><a href="#4-语法格式-使用动画" class="headerlink" title="4. 语法格式(使用动画)"></a>4. 语法格式(使用动画)</h3><pre><code>   div {       /* 调用动画 */       animation-name: 动画名称;        /* 持续时间 */        animation-duration: 持续时间；   }</code></pre><h3 id="5-动画序列"><a href="#5-动画序列" class="headerlink" title="5. 动画序列"></a>5. 动画序列</h3><ul><li>0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列</li><li>在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数</li><li>用百分比来规定变化发生的时间，或用 <code>from</code> 和 <code>to</code>，等同于 0% 和 100%</li></ul><h3 id="6-代码演示"><a href="#6-代码演示" class="headerlink" title="6. 代码演示"></a>6. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">&lt;style>       div </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>         <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>         <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">0.5</span>s<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token atrule"><span class="token rule">@keyframes</span> move</span><span class="token punctuation">{</span>         <span class="token selector">0% </span><span class="token punctuation">{</span>           <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span>         <span class="token punctuation">}</span>         <span class="token selector">100% </span><span class="token punctuation">{</span>           <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">500</span>px, <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     &lt;/style></code></pre><h2 id="十九、动画常见属性"><a href="#十九、动画常见属性" class="headerlink" title="十九、动画常见属性"></a>十九、动画常见属性</h2><h3 id="1-常见的属性"><a href="#1-常见的属性" class="headerlink" title="1. 常见的属性"></a>1. 常见的属性</h3><img width="80%" src="images\animationcanshu.png"><p>   ​</p><h3 id="2-代码演示-3"><a href="#2-代码演示-3" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画名称 */</span>     <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画花费时长 */</span>     <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画速度曲线 */</span>     <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in-out<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画等待多长时间执行 */</span>     <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 规定动画播放次数 infinite: 无限循环 */</span>     <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 是否逆行播放 */</span>     <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画结束之后的状态 */</span>     <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 规定动画是否暂停或者播放 */</span>     <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="二十、-动画简写方式"><a href="#二十、-动画简写方式" class="headerlink" title="二十、 动画简写方式"></a>二十、 动画简写方式</h2><h3 id="1-动画简写方式"><a href="#1-动画简写方式" class="headerlink" title="1. 动画简写方式"></a>1. 动画简写方式</h3><pre class=" language-css"><code class="language-css">   <span class="token comment" spellcheck="true">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span>   <span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction fill-mode</code></pre><h3 id="2-知识要点"><a href="#2-知识要点" class="headerlink" title="2. 知识要点"></a>2. 知识要点</h3><ul><li>简写属性里面不包含 <code>animation-paly-state</code></li><li>暂停动画 <code>animation-paly-state: paused</code>; 经常和鼠标经过等其他配合使用</li><li>要想动画走回来，而不是直接调回来：<code>animation-direction: alternate</code></li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code> </li></ul><h3 id="3-代码演示-1"><a href="#3-代码演示-1" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token property">animation</span><span class="token punctuation">:</span> move <span class="token number">2</span>s linear <span class="token number">1</span>s infinite alternate forwards<span class="token punctuation">;</span></code></pre><h2 id="二十一、速度曲线细节"><a href="#二十一、速度曲线细节" class="headerlink" title="二十一、速度曲线细节"></a>二十一、速度曲线细节</h2><h3 id="1-速度曲线细节"><a href="#1-速度曲线细节" class="headerlink" title="1. 速度曲线细节"></a>1. 速度曲线细节</h3><ul><li><code>animation-timing-function</code>: 规定动画的速度曲线，默认是<code>ease</code></li></ul><img width="80%" src="images\steps.png"><h3 id="2-代码演示-4"><a href="#2-代码演示-4" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>     <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>     <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>     <span class="token property">animation</span><span class="token punctuation">:</span> move <span class="token number">4</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> forwards<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>     <span class="token selector">0% </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">100% </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="3-案例：奔跑的熊大"><a href="#3-案例：奔跑的熊大" class="headerlink" title="3. 案例：奔跑的熊大"></a>3. 案例：奔跑的熊大</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(media/bear.png)</span> no-repeat<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 我们元素可以添加多个动画， 用逗号分隔 */</span>            <span class="token property">animation</span><span class="token punctuation">:</span> bear <span class="token number">.4</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> infinite, move <span class="token number">3</span>s forwards<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@keyframes</span> bear</span> <span class="token punctuation">{</span>            <span class="token selector">0% </span><span class="token punctuation">{</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">1600</span>px <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>            <span class="token selector">0% </span><span class="token punctuation">{</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* margin-left: -100px; */</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="二十二、-认识-3D-转换"><a href="#二十二、-认识-3D-转换" class="headerlink" title="二十二、 认识 3D 转换"></a>二十二、 认识 <code>3D</code> 转换</h2><h3 id="1-3D-的特点"><a href="#1-3D-的特点" class="headerlink" title="1. 3D 的特点"></a>1. <code>3D</code> 的特点</h3><ul><li><p>近大远小</p></li><li><p>物体和面遮挡不可见</p><h3 id="2-三维坐标系"><a href="#2-三维坐标系" class="headerlink" title="2. 三维坐标系"></a>2. 三维坐标系</h3></li><li><p>x 轴：水平向右  – <strong>注意：x 轴右边是正值，左边是负值</strong></p></li><li><p>y 轴：垂直向下  – <strong>注意：y 轴下面是正值，上面是负值</strong></p></li><li><p>z 轴：垂直屏幕  –  <strong>注意：往外边的是正值，往里面的是负值</strong></p></li></ul><img width="80%" src="images\sanwei.png"><h2 id="二十三、3D-转换"><a href="#二十三、3D-转换" class="headerlink" title="二十三、3D 转换"></a>二十三、<code>3D</code> 转换</h2><h3 id="1-3D-转换知识要点"><a href="#1-3D-转换知识要点" class="headerlink" title="1. 3D 转换知识要点"></a>1. <code>3D</code> 转换知识要点</h3><ul><li><code>3D</code> 位移：<code>translate3d(x, y, z)</code></li><li><code>3D</code> 旋转：<code>rotate3d(x, y, z)</code></li><li>透视：<code>perspctive</code></li><li><code>3D</code>呈现 <code>transfrom-style</code></li></ul><h3 id="2-3D-移动-translate3d"><a href="#2-3D-移动-translate3d" class="headerlink" title="2. 3D 移动 translate3d"></a>2. <code>3D</code> 移动 <code>translate3d</code></h3><ul><li><code>3D</code> 移动就是在 <code>2D</code> 移动的基础上多加了一个可以移动的方向，就是 z 轴方向</li><li><code>transform: translateX(100px)</code>：仅仅是在 x 轴上移动</li><li><code>transform: translateY(100px)</code>：仅仅是在 y 轴上移动</li><li><code>transform: translateZ(100px)</code>：仅仅是在 z 轴上移动</li><li><code>transform: translate3d(x, y, z)</code>：其中x、y、z 分别指要移动的轴的方向的距离</li><li><strong>注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充</strong></li></ul><h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h3><pre class=" language-css"><code class="language-css">    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>x, y, z<span class="token punctuation">)</span></code></pre><h3 id="4-代码演示-3"><a href="#4-代码演示-3" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">100</span>px, <span class="token number">100</span>px, <span class="token number">100</span>px<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */</span>   <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">100</span>px, <span class="token number">100</span>px, <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="二十四、透视-perspective"><a href="#二十四、透视-perspective" class="headerlink" title="二十四、透视 perspective"></a>二十四、透视 <code>perspective</code></h2><h3 id="1-知识点讲解"><a href="#1-知识点讲解" class="headerlink" title="1. 知识点讲解"></a>1. 知识点讲解</h3><ul><li>如果想要网页产生 <code>3D</code> 效果需要透视(理解成 <code>3D</code> 物体投影的 <code>2D</code> 平面上)</li><li>实际上模仿人类的视觉位置，可视为安排一直眼睛去看</li><li>透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul><h3 id="2-知识要点-1"><a href="#2-知识要点-1" class="headerlink" title="2. 知识要点"></a>2. 知识要点</h3><ul><li><p><strong>透视需要写在被视察元素的父盒子上面</strong></p></li><li><p>注意下方图片</p><ul><li><p>d：就是视距，视距就是指人的眼睛到屏幕的距离</p></li><li><p>z：就是 z 轴，z 轴越大(正值)，我们看到的物体就越大</p></li></ul></li></ul><img width="80%" src="images\perspective.png"><p>   ​            </p><h3 id="3-代码演示-2"><a href="#3-代码演示-2" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">body </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="二十五、-translateZ"><a href="#二十五、-translateZ" class="headerlink" title="二十五、 translateZ"></a>二十五、 <code>translateZ</code></h2><h3 id="1-translateZ-与-perspecitve-的区别"><a href="#1-translateZ-与-perspecitve-的区别" class="headerlink" title="1. translateZ 与 perspecitve 的区别"></a>1. <code>translateZ</code> 与 <code>perspecitve</code> 的区别</h3><p><code>perspecitve</code> 给父级进行设置，<code>translateZ</code> 给 子元素进行设置不同的大小</p><h2 id="二十六、3D-旋转rotateX"><a href="#二十六、3D-旋转rotateX" class="headerlink" title="二十六、3D 旋转rotateX"></a>二十六、<code>3D</code> 旋转<code>rotateX</code></h2><blockquote><p>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转</p></blockquote><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><ul><li><code>transform: rotateX(45deg)</code> – 沿着 x 轴正方向旋转 45 度</li><li><code>transform: rotateY(45deg)</code> – 沿着 y 轴正方向旋转 45 度</li><li><code>transform: rotateZ(45deg)</code> – 沿着 z 轴正方向旋转 45 度</li><li><code>transform: rotate3d(x, y, z, 45deg)</code> – 沿着自定义轴旋转 45 deg 为角度</li></ul><h3 id="2-代码案例"><a href="#2-代码案例" class="headerlink" title="2. 代码案例"></a>2. 代码案例</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h3 id="3-左手准则"><a href="#3-左手准则" class="headerlink" title="3. 左手准则"></a>3. 左手准则</h3><ul><li><p>左手的手拇指指向 x 轴的正方向</p></li><li><p>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</p></li></ul><img width="80%" src="images\rotateX.png"><p>​              </p><h2 id="二十七、3D-旋转-rotateY"><a href="#二十七、3D-旋转-rotateY" class="headerlink" title="二十七、3D 旋转 rotateY"></a>二十七、<code>3D</code> 旋转 <code>rotateY</code></h2><h3 id="1-代码演示-1"><a href="#1-代码演示-1" class="headerlink" title="1. 代码演示"></a>1. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h3 id="2-左手准则"><a href="#2-左手准则" class="headerlink" title="2. 左手准则"></a>2. 左手准则</h3><ul><li><p>左手的拇指指向 y 轴的正方向</p></li><li><p>其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值)</p></li></ul><img width="80%" src="images\rotateY.png"><pre><code> ​</code></pre><h2 id="二十八、-3D-旋转-rotateZ"><a href="#二十八、-3D-旋转-rotateZ" class="headerlink" title="二十八、 3D 旋转 rotateZ"></a>二十八、 <code>3D</code> 旋转 <code>rotateZ</code></h2><h3 id="1-代码演示-2"><a href="#1-代码演示-2" class="headerlink" title="1. 代码演示"></a>1. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h3 id="2-rotate3d"><a href="#2-rotate3d" class="headerlink" title="2. rotate3d"></a>2. <code>rotate3d</code></h3><ul><li><code>transform: rotate3d(x, y, z, deg)</code> – 沿着自定义轴旋转 deg 为角度</li><li>x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度<ul><li><code>transform: rotate3d(1, 1, 0, 180deg)</code> – 沿着对角线旋转 45deg</li><li><code>transform: rotate3d(1, 0, 0, 180deg)</code> – 沿着 x 轴旋转 45deg</li></ul></li></ul><h3 id="3-代码演示-3"><a href="#3-代码演示-3" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">1</span>, <span class="token number">0</span>, <span class="token number">180</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h2 id="二十九、3D-呈现-transform-style"><a href="#二十九、3D-呈现-transform-style" class="headerlink" title="二十九、3D 呈现 transform-style"></a>二十九、<code>3D</code> 呈现 <code>transform-style</code></h2><ul><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code>  代表子元素不开启 <code>3D</code> 立体空间，默认的</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
