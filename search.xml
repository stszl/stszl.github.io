<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>移动端常见布局</title>
      <link href="/2019/05/08/yi-dong-duan-chang-jian-bu-ju/"/>
      <url>/2019/05/08/yi-dong-duan-chang-jian-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="一、流式布局"><a href="#一、流式布局" class="headerlink" title="一、流式布局"></a>一、流式布局</h1><h2 id="1-1-移动端基础"><a href="#1-1-移动端基础" class="headerlink" title="1.1 移动端基础"></a>1.1 移动端基础</h2><h3 id="1-1-1-浏览器现状"><a href="#1-1-1-浏览器现状" class="headerlink" title="1.1.1 浏览器现状"></a>1.1.1 浏览器现状</h3><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h3 id="1-1-2-手机屏幕的现状"><a href="#1-1-2-手机屏幕的现状" class="headerlink" title="1.1.2 手机屏幕的现状"></a>1.1.2 手机屏幕的现状</h3><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h3 id="1-1-3-常见移动端屏幕尺寸"><a href="#1-1-3-常见移动端屏幕尺寸" class="headerlink" title="1.1.3 常见移动端屏幕尺寸"></a>1.1.3 常见移动端屏幕尺寸</h3><img width="80%" src="./images/01-1.jpg"><h3 id="1-1-4-移动端调试方法"><a href="#1-1-4-移动端调试方法" class="headerlink" title="1.1.4 移动端调试方法"></a>1.1.4 移动端调试方法</h3><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h2 id="1-2-视口"><a href="#1-2-视口" class="headerlink" title="1.2 视口"></a>1.2 视口</h2><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h3 id="1-2-1-布局视口-layout-viewport"><a href="#1-2-1-布局视口-layout-viewport" class="headerlink" title="1.2.1 布局视口 layout viewport"></a>1.2.1 布局视口 layout viewport</h3><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><img width="50%" src="./images/01-2.jpg"><h3 id="1-2-2-视觉视口-visual-viewport"><a href="#1-2-2-视觉视口-visual-viewport" class="headerlink" title="1.2.2 视觉视口 visual viewport"></a>1.2.2 视觉视口 visual viewport</h3><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><img width="50%" src="./images/01-3.jpg"><h3 id="1-2-3-理想视口-ideal-viewport"><a href="#1-2-3-理想视口-ideal-viewport" class="headerlink" title="1.2.3 理想视口 ideal viewport"></a>1.2.3 理想视口 ideal viewport</h3><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h3 id="1-2-4-meta标签"><a href="#1-2-4-meta标签" class="headerlink" title="1.2.4 meta标签"></a>1.2.4 meta标签</h3><img width="80%" src="./images/01-4.jpg"><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h2 id="1-3-二倍图"><a href="#1-3-二倍图" class="headerlink" title="1.3 二倍图"></a>1.3 二倍图</h2><h3 id="1-3-1-物理像素-amp-物理像素比"><a href="#1-3-1-物理像素-amp-物理像素比" class="headerlink" title="1.3.1 物理像素&amp;物理像素比"></a>1.3.1 物理像素&amp;物理像素比</h3><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h3 id="1-3-2-背景缩放background-size"><a href="#1-3-2-背景缩放background-size" class="headerlink" title="1.3.2 背景缩放background-size"></a>1.3.2 背景缩放background-size</h3><p>background-size 属性规定背景图像的尺寸</p><pre><code>background-size: 背景图片宽度 背景图片高度;</code></pre><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h2 id="1-4-移动开发选择和技术解决方案"><a href="#1-4-移动开发选择和技术解决方案" class="headerlink" title="1.4 移动开发选择和技术解决方案"></a>1.4 移动开发选择和技术解决方案</h2><h3 id="1-4-1-移动端主流方案"><a href="#1-4-1-移动端主流方案" class="headerlink" title="1.4.1 移动端主流方案"></a>1.4.1 移动端主流方案</h3><ol><li>单独制作移动端页面（主流）</li></ol><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc端的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><img width="80%" src="./images/01-5.jpg"><p>京东移动端：</p><img width="50%" src="./images/01-6.jpg"><ol start="2"><li>响应式页面兼容移动端（其次）</li></ol><img width="50%" src="./images/01-7.jpg"><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h3 id="1-4-2-移动端技术解决方案"><a href="#1-4-2-移动端技术解决方案" class="headerlink" title="1.4.2 移动端技术解决方案"></a>1.4.2 移动端技术解决方案</h3><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。<br>我们可以放心使用 H5 标签和 CSS3 样式。<br>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/，官网地址： <a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">http://necolas.github.io/normalize.css/</a></p><ul><li>Normalize.css：保护了有价值的默认值</li><li>Normalize.css：修复了浏览器的bug</li><li>Normalize.css：是模块化的</li><li>Normalize.css：拥有详细的文档</li></ul><h3 id="1-4-3-移动端大量使用-CSS3盒子模型box-sizing"><a href="#1-4-3-移动端大量使用-CSS3盒子模型box-sizing" class="headerlink" title="1.4.3 移动端大量使用 CSS3盒子模型box-sizing"></a>1.4.3 移动端大量使用 CSS3盒子模型box-sizing</h3><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding<br>CSS3盒子模型：盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding<br>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*传统盒子模型*/</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span></code></pre><p>移动端可以全部CSS3 盒子模型<br>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h3 id="1-4-4-移动端特殊样式"><a href="#1-4-4-移动端特殊样式" class="headerlink" title="1.4.4 移动端特殊样式"></a>1.4.4 移动端特殊样式</h3><pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/*CSS3盒子模型*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span>    <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span>    <span class="token property">-webkit-appearance</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*禁用长按页面时的弹出菜单*/</span>    <span class="token selector">img,a </span><span class="token punctuation">{</span> <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="1-5-移动端常见布局"><a href="#1-5-移动端常见布局" class="headerlink" title="1.5 移动端常见布局"></a>1.5 移动端常见布局</h2><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。<br>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。<br>流式布局方式是移动web开发使用的比较常见的布局方式。</p><h1 id="二、flex布局"><a href="#二、flex布局" class="headerlink" title="二、flex布局"></a>二、flex布局</h1><h2 id="2-1-传统布局和flex布局对比"><a href="#2-1-传统布局和flex布局对比" class="headerlink" title="2.1 传统布局和flex布局对比"></a>2.1 传统布局和flex布局对比</h2><h3 id="2-1-1-传统布局"><a href="#2-1-1-传统布局" class="headerlink" title="2.1.1 传统布局"></a>2.1.1 传统布局</h3><ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul><h3 id="2-1-2-flex布局"><a href="#2-1-2-flex布局" class="headerlink" title="2.1.2 flex布局"></a>2.1.2 flex布局</h3><ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul><h3 id="2-1-3-建议"><a href="#2-1-3-建议" class="headerlink" title="2.1.3 建议"></a>2.1.3 建议</h3><ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul><h2 id="2-2-flex布局原理"><a href="#2-2-flex布局原理" class="headerlink" title="2.2 flex布局原理"></a>2.2 flex布局原理</h2><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 </li><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</li></ul><p><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h2 id="2-3-父项常见属性"><a href="#2-3-父项常见属性" class="headerlink" title="2.3 父项常见属性"></a>2.3 父项常见属性</h2><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行  </li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h3 id="2-3-1-flex-direction设置主轴的方向"><a href="#2-3-1-flex-direction设置主轴的方向" class="headerlink" title="2.3.1 flex-direction设置主轴的方向"></a>2.3.1 flex-direction设置主轴的方向</h3><ul><li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y 轴</li><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下</li></ul><img width="80%" src="./images/02-1.jpg"><ul><li><p>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的</p><img width="80%" src="./images/02-2.jpg"></li></ul><h3 id="2-3-2-justify-content-设置主轴上的子元素排列方式"><a href="#2-3-2-justify-content-设置主轴上的子元素排列方式" class="headerlink" title="2.3.2 justify-content 设置主轴上的子元素排列方式"></a>2.3.2 justify-content 设置主轴上的子元素排列方式</h3><img width="80%" src="./images/02-3.jpg"><h3 id="2-3-3-flex-wrap设置是否换行"><a href="#2-3-3-flex-wrap设置是否换行" class="headerlink" title="2.3.3 flex-wrap设置是否换行"></a>2.3.3 flex-wrap设置是否换行</h3><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h3 id="2-3-4-align-items-设置侧轴上的子元素排列方式（单行-）"><a href="#2-3-4-align-items-设置侧轴上的子元素排列方式（单行-）" class="headerlink" title="2.3.4 align-items 设置侧轴上的子元素排列方式（单行 ）"></a>2.3.4 align-items 设置侧轴上的子元素排列方式（单行 ）</h3><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式  在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸</li></ul><h3 id="2-3-5-align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#2-3-5-align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="2.3.5 align-content  设置侧轴上的子元素的排列方式（多行）"></a>2.3.5 align-content  设置侧轴上的子元素的排列方式（多行）</h3><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。</p><img width="80%" src="./images/02-4.jpg"><h3 id="2-3-6-align-content-和align-items区别"><a href="#2-3-6-align-content-和align-items区别" class="headerlink" title="2.3.6 align-content 和align-items区别"></a>2.3.6 align-content 和align-items区别</h3><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 </li><li>总结就是单行找align-items  多行找 align-content</li></ul><h3 id="2-3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#2-3-7-flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="2.3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>2.3.7 flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h3><pre><code>flex-flow:row wrap;</code></pre><h2 id="2-4-flex布局子项常见属性"><a href="#2-4-flex布局子项常见属性" class="headerlink" title="2.4 flex布局子项常见属性"></a>2.4 flex布局子项常见属性</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="2-4-1-flex-属性"><a href="#2-4-1-flex-属性" class="headerlink" title="2.4.1  flex 属性"></a>2.4.1  flex 属性</h3><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 默认值 0 */</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-2-align-self控制子项自己在侧轴上的排列方式"><a href="#2-4-2-align-self控制子项自己在侧轴上的排列方式" class="headerlink" title="2.4.2 align-self控制子项自己在侧轴上的排列方式"></a>2.4.2 align-self控制子项自己在侧轴上的排列方式</h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</p><p>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><pre class=" language-css"><code class="language-css"><span class="token selector">span<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 设置自己在侧轴上的排列方式 */</span>      <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-3-order-属性定义项目的排列顺序"><a href="#2-4-3-order-属性定义项目的排列顺序" class="headerlink" title="2.4.3 order 属性定义项目的排列顺序"></a>2.4.3 order 属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>    <span class="token property">order</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-5-携程网首页案例制作"><a href="#2-5-携程网首页案例制作" class="headerlink" title="2.5 携程网首页案例制作"></a>2.5 携程网首页案例制作</h2><p>携程网链接：<a href="http://m.ctrip.com" target="_blank" rel="noopener">http://m.ctrip.com</a></p><ol><li>技术选型</li></ol><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取flex布局</p><ol start="2"><li>搭建相关文件夹</li></ol><img width="50%" src="./images/02-5.jpg"><ol start="3"><li>设置视口标签以及引入初始化样式</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no,initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/normalize.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>常用初始化样式</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">540</span>px<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">320</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">font</span><span class="token punctuation">:</span> normal <span class="token number">14</span>px/<span class="token number">1.5</span> Tahoma,<span class="token string">"Lucida Grande"</span>,Verdana,<span class="token string">"Microsoft Yahei"</span>,STXihei,hei<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f2f2f2</span><span class="token punctuation">;</span>  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>模块名字划分</li></ol><img width="80%" src="./images/02-6.jpg"><h1 id="三、rem布局"><a href="#三、rem布局" class="headerlink" title="三、rem布局"></a>三、rem布局</h1><h2 id="3-1-rem基础"><a href="#3-1-rem基础" class="headerlink" title="3.1 rem基础"></a>3.1 rem基础</h2><h3 id="3-1-1-rem单位"><a href="#3-1-1-rem单位" class="headerlink" title="3.1.1 rem单位"></a>3.1.1 rem单位</h3><p>rem (root em)是一个相对单位，类似于em，em是父元素字体大小。</p><p>不同的是rem的基准是相对于html元素的字体大小。</p><p>比如，根元素（html）设置font-size=12px; 非根元素设置width:2rem; 则换成px表示就是24px。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 根html 为 12px */</span><span class="token selector">html </span><span class="token punctuation">{</span>   <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 此时 div 的字体大小就是 24px */</span>       <span class="token selector">div </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小。</p><h2 id="3-2-媒体查询"><a href="#3-2-媒体查询" class="headerlink" title="3.2 媒体查询"></a>3.2 媒体查询</h2><h3 id="3-2-1-什么是媒体查询"><a href="#3-2-1-什么是媒体查询" class="headerlink" title="3.2.1 什么是媒体查询"></a>3.2.1 什么是媒体查询</h3><p>媒体查询（Media Query）是CSS3新语法。</p><ul><li>使用 @media查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面 </li><li>目前针对很多苹果手机、Android手机，平板等设备都用得到多媒体查询</li></ul><h3 id="3-2-2-媒体查询语法规范"><a href="#3-2-2-媒体查询语法规范" class="headerlink" title="3.2.2 媒体查询语法规范"></a>3.2.2 媒体查询语法规范</h3><ul><li>用 @media开头 注意@符号</li><li>mediatype  媒体类型</li><li>关键字 and  not  only</li><li>media feature 媒体特性必须有小括号包含</li></ul><pre><code>@media mediatype and|not|only (media feature) {    CSS-Code;}</code></pre><ol><li>mediatype 查询类型</li></ol><p>​       将不同的终端设备划分成不同的类型，称为媒体类型</p><img width="80%" src="./images/03-1.jpg"><ol start="2"><li>关键字</li></ol><p>​       关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p><ul><li>and：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li>not：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li>only：指定某个特定的媒体类型，可以省略。    </li></ul><ol start="3"><li><p>媒体特性</p><p>每种媒体类型都具体各自不同的特性，根据不同媒体类型的媒体特性设置不同的展示风格。我们暂且了解三个。</p><p>注意他们要加小括号包含</p><img width="80%" src="./images/03-2.jpg"></li><li><p>媒体查询书写规则</p><p>注意： 为了防止混乱，媒体查询我们要按照从小到大或者从大到小的顺序来写,但是我们最喜欢的还是从小到大来写，这样代码更简洁</p><img width="80%" src="./images/03-3.jpg"></li></ol><h2 id="3-3-less-基础"><a href="#3-3-less-基础" class="headerlink" title="3.3 less 基础"></a>3.3 less 基础</h2><h3 id="3-3-1-维护css弊端"><a href="#3-3-1-维护css弊端" class="headerlink" title="3.3.1 维护css弊端"></a>3.3.1 维护css弊端</h3><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的。</li><li>不方便维护及扩展，不利于复用。</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目。 </li></ul><h3 id="3-3-2-Less-介绍"><a href="#3-3-2-Less-介绍" class="headerlink" title="3.3.2 Less 介绍"></a>3.3.2 Less 介绍</h3><p>Less（LeanerStyle Sheets 的缩写）是一门 CSS扩展语言，也成为CSS预处理器。</p><p>做为 CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。</p><p>它在CSS 的语法基础之上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS的维护成本，就像它的名称所说的那样，Less可以让我们用更少的代码做更多的事情。</p><p>Less中文网址：<a href="http://lesscss.cn/" target="_blank" rel="noopener">http://lesscss.cn/</a></p><p>常见的CSS预处理器：Sass、Less、Stylus</p><p>一句话：Less是一门 CSS 预处理语言，它扩展了CSS的动态特性。</p><p>Less安装</p><p>①安装nodejs，可选择版本(8.0)，网址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p>②检查是否安装成功，使用cmd命令（win10是window+r 打开运行输入cmd）  —输入“node –v”查看版本即可</p><p>③基于nodejs在线安装Less，使用cmd命令“npm install -g less”即可</p><p>④检查是否安装成功，使用cmd命令“ lessc -v ”查看版本即可</p><p>Less 使用之变量</p><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><pre><code>@变量名:值;</code></pre><ul><li>必须有@为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><pre><code>@color: pink;</code></pre><p>Less 编译 vocode Less 插件</p><p>Easy LESS 插件用来把less文件编译为css文件</p><p>安装完毕插件，重新加载下 vscode。</p><p>只要保存一下Less文件，会自动生成CSS文件。</p><img width="80%" src="./images/03-4.jpg"><p>Less 嵌套</p><pre class=" language-css"><code class="language-css"><span class="token selector">// 将css改为less<span class="token id">#header</span> <span class="token class">.logo</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#header</span> </span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.logo</span> </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果遇见 （交集|伪类|伪元素选择器） ，利用&amp;进行连接</p><pre><code>a:hover{    color:red;}a{  &amp;:hover{      color:red;  }}</code></pre><p>Less 运算</p><p>任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算。</p><pre><code>/*Less 里面写*/@witdh: 10px + 5;div {    border: @witdh solid red;}/*生成的css*/div {  border: 15px solid red;}/*Less 甚至还可以这样 */width: (@width + 5) * 2;</code></pre><ul><li>乘号（*）和除号（/）的写法  </li><li>运算符中间左右有个空格隔开 1px + 5</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位 </li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><h2 id="3-4-rem适配方案"><a href="#3-4-rem适配方案" class="headerlink" title="3.4 rem适配方案"></a>3.4 rem适配方案</h2><p>1.让一些不能等比自适应的元素，达到当设备尺寸发生改变的时候，等比例适配当前设备。</p><p>2.使用媒体查询根据不同设备按比例设置html的字体大小，然后页面元素使用rem做尺寸单位，当html字体大小变化元素尺寸也会发生变化，从而达到等比缩放的适配。</p><p>技术方案：</p><ol><li>less+rem+媒体查询</li><li>lflexible.js+rem</li></ol><p>总结： </p><p>两种方案现在都存在。</p><p>方案2 更简单，现阶段大家无需了解里面的js代码。</p><h3 id="3-4-1-rem实际开发适配方案1"><a href="#3-4-1-rem实际开发适配方案1" class="headerlink" title="3.4.1 rem实际开发适配方案1"></a>3.4.1 rem实际开发适配方案1</h3><p>①假设设计稿是750px</p><p>②假设我们把整个屏幕划分为15等份（划分标准不一可以是20份也可以是10等份）</p><p>③每一份作为html字体大小，这里就是50px</p><p>④那么在320px设备的时候，字体大小为320/15就是  21.33px</p><p>⑤用我们页面元素的大小除以不同的 html字体大小会发现他们比例还是相同的</p><p>⑥比如我们以750为标准设计稿</p><p>⑦一个100<em>100像素的页面元素在  750屏幕下，  就是 100/ 50  转换为rem  是  2rem</em>2rem  比例是1比1</p><p>⑧320屏幕下，  html字体大小为21.33   则 2rem=  42.66px  此时宽和高都是 42.66  但是宽和高的比例还是 1比1</p><p>⑨但是已经能实现不同屏幕下  页面元素盒子等比例缩放的效果</p><p>总结：</p><p>①最后的公式：页面元素的rem值 =  页面元素值（px） /  （屏幕宽度  /  划分的份数）</p><p>②屏幕宽度/划分的份数就是 htmlfont-size 的大小</p><p>③或者：页面元素的rem值 =  页面元素值（px） /  html font-size 字体大小</p><h2 id="3-5-苏宁首页"><a href="#3-5-苏宁首页" class="headerlink" title="3.5 苏宁首页"></a>3.5 苏宁首页</h2><p>苏宁首页地址 ：<a href="m.suning.com">苏宁首页</a></p><p>1、 技术选型</p><p>方案：我们采取单独制作移动页面方案</p><p>技术：布局采取rem适配布局（less + rem  + 媒体查询）</p><p>设计图： 本设计图采用 750px 设计尺寸</p><p>2、搭建文件结构</p><img width="50%" src="./images/03-5.jpg"><p>3、设置视口标签以及引入初始化样式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no,         initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/normalize.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>4、设置公共common.less文件</p><ul><li>新建common.less    设置好最常见的屏幕尺寸，利用媒体查询设置不同的html字体大小，因为除了首页其他页面也需要</li><li>我们关心的尺寸有 320px、360px、375px、384px、400px、414px、424px、480px、540px、720px、750px</li><li>划分的份数我们定为 15等份</li><li>因为我们pc端也可以打开我们苏宁移动端首页，我们默认html字体大小为 50px，注意这句话写到最上面</li></ul><h2 id="3-6-rem-适配方案2"><a href="#3-6-rem-适配方案2" class="headerlink" title="3.6 rem 适配方案2"></a>3.6 rem 适配方案2</h2><p>手机淘宝团队出的简洁高效 移动端适配库</p><p>我们再也不需要在写不同屏幕的媒体查询，因为里面js做了处理</p><p>它的原理是把当前设备划分为10等份，但是不同设备下，比例还是一致的。</p><p>我们要做的，就是确定好我们当前设备的html 文字大小就可以了</p><p>比如当前设计稿是 750px， 那么我们只需要把 html 文字大小设置为 75px(750px / 10) 就可以</p><p>里面页面元素rem值： 页面元素的px 值 /  75  </p><p>剩余的，让flexible.js来去算</p><p>github地址：<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p>总结：</p><p>因为flexible是默认将屏幕分为10等分</p><p>但是当屏幕大于750的时候希望不要再去重置html字体了</p><p>所以要自己通过媒体查询设置一下</p><p>并且要把权重提到最高</p><p>VSCode  px 转换rem 插件 cssrem </p><p>因为cssrem中css自动转化为rem是参照默认插件的16转换的所以需要自己配置</p><img width="80%" src="./images/03-6.jpg"><img width="80%" src="./images/03-7.jpg"><h1 id="四、响应式布局"><a href="#四、响应式布局" class="headerlink" title="四、响应式布局"></a>四、响应式布局</h1><h2 id="4-1-响应式开发原理"><a href="#4-1-响应式开发原理" class="headerlink" title="4.1 响应式开发原理"></a>4.1 响应式开发原理</h2><h3 id="4-1-1-响应式开发原理"><a href="#4-1-1-响应式开发原理" class="headerlink" title="4.1.1 响应式开发原理"></a>4.1.1 响应式开发原理</h3><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p><p>设备的划分情况：</p><ul><li>小于768的为超小屏幕（手机）</li><li>768~992之间的为小屏设备（平板）</li><li>992~1200的中等屏幕（桌面显示器）</li><li>大于1200的宽屏设备（大桌面显示器）</li></ul><h3 id="4-1-2-响应式布局容器"><a href="#4-1-2-响应式布局容器" class="headerlink" title="4.1.2 响应式布局容器"></a>4.1.2 响应式布局容器</h3><p>响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。</p><p>原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化。</p><p>父容器版心的尺寸划分</p><ul><li>超小屏幕（手机，小于 768px）：设置宽度为 100%</li><li>小屏幕（平板，大于等于 768px）：设置宽度为 750px</li><li>中等屏幕（桌面显示器，大于等于 992px）：宽度设置为 970px</li><li>大屏幕（大桌面显示器，大于等于 1200px）：宽度设置为 1170px </li></ul><p>但是我们也可以根据实际情况自己定义划分</p><h2 id="4-2-bootstrap的介绍"><a href="#4-2-bootstrap的介绍" class="headerlink" title="4.2 bootstrap的介绍"></a>4.2 bootstrap的介绍</h2><h3 id="4-2-1-Bootstrap简介"><a href="#4-2-1-Bootstrap简介" class="headerlink" title="4.2.1 Bootstrap简介"></a>4.2.1 Bootstrap简介</h3><p>Bootstrap 来自 Twitter（推特），是目前最受欢迎的前端框架。Bootstrap 是基于HTML、CSS 和 JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。</p><p><a href="lhttp://www.bootcss.com/">中文网</a>  <a href="lhttp://getbootstrap.com/">官网</a>  <a href="https://v3.bootcss.com/" target="_blank" rel="noopener">推荐网站</a></p><p>框架：顾名思义就是一套架构，它有一套比较完整的网页功能解决方案，而且控制权在框架本身，有预制样式库、组件和插件。使用者要按照框架所规定的某种规范进行开发。</p><h3 id="4-2-2-bootstrap优点"><a href="#4-2-2-bootstrap优点" class="headerlink" title="4.2.2 bootstrap优点"></a>4.2.2 bootstrap优点</h3><ul><li>标准化的html+css编码规范</li><li>提供了一套简洁、直观、强悍的组件</li><li>有自己的生态圈，不断的更新迭代</li><li>让开发更简单，提高了开发的效率</li></ul><h3 id="4-2-3-版本简介"><a href="#4-2-3-版本简介" class="headerlink" title="4.2.3 版本简介"></a>4.2.3 版本简介</h3><p>2.x.x：停止维护,兼容性好,代码不够简洁，功能不够完善。</p><p>3.x.x：目前使用最多,稳定,但是放弃了IE6-IE7。对 IE8 支持但是界面效果不好,偏向用于开发响应式布局、移动设备优先的WEB 项目。</p><p>4.x.x：最新版，目前还不是很流行</p><h3 id="4-2-4-bootstrap基本使用"><a href="#4-2-4-bootstrap基本使用" class="headerlink" title="4.2.4 bootstrap基本使用"></a>4.2.4 bootstrap基本使用</h3><p>在现阶段我们还没有接触JS相关课程，所以我们只考虑使用它的样式库。</p><p>Bootstrap 使用四步曲： </p><ol><li><p>创建文件夹结构  </p><p><img src="./images/04-1.jpg" alt=""></p></li><li><p>创建 html 骨架结构 </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Bootstrap 101 Template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Bootstrap --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --></span>    <span class="token comment" spellcheck="true">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --></span>    <span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>      &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js">&lt;/script>      &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js">&lt;/script>    &lt;![endif]--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/jquery/1.11.3/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Include all compiled plugins (below), or include individual files as needed --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>​</p></li><li><p>引入相关样式文件  </p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Bootstrap 核心样式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bootstrap/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>​</p></li><li><p>书写内容 </p><p>直接拿Bootstrap 预先定义好的样式来使用</p><p>修改Bootstrap 原来的样式，注意权重问题</p><p>学好Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果</p></li></ol><h3 id="4-2-5-bootstrap布局容器"><a href="#4-2-5-bootstrap布局容器" class="headerlink" title="4.2.5 bootstrap布局容器"></a>4.2.5 bootstrap布局容器</h3><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 或者<code>.container-fluid</code> 容器，它提供了两个作此用处的类。</p><p>.container</p><ul><li>响应式布局的容器  固定宽度</li><li>大屏 ( &gt;=1200px)  宽度定为 1170px</li><li>中屏 ( &gt;=992px)   宽度定为  970px</li><li>小屏 ( &gt;=768px)   宽度定为  750px</li><li>超小屏  (100%) </li></ul><p>.container-fluid</p><ul><li>流式布局容器 百分百宽度</li><li>占据全部视口（viewport）的容器。</li></ul><h3 id="4-2-6-bootstrap栅格系统"><a href="#4-2-6-bootstrap栅格系统" class="headerlink" title="4.2.6 bootstrap栅格系统"></a>4.2.6 bootstrap栅格系统</h3><p>Bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li>按照不同屏幕划分为1~12 等份</li><li>行（row） 可以去除父容器作用15px的边距</li><li>xs-extra small：超小； sm-small：小；  md-medium：中等； lg-large：大；</li><li>列（column）大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的 padding</li><li>可以同时为一列指定多个设备的类名，以便划分不同份数  例如 class=”col-md-4 col-sm-6”</li></ul><p>栅格嵌套</p><p>栅格系统内置的栅格系统将内容再次嵌套。简单理解就是一个列内再分成若干份小列。我们可以通过添加一个新的 .row 元素和一系列 .col-sm-* 元素到已经存在的 .col-sm-*<br>元素内。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 列嵌套 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>列偏移</p><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。</p><pre><code> &lt;!-- 列偏移 --&gt;  &lt;div class="row"&gt;      &lt;div class="col-lg-4"&gt;1&lt;/div&gt;      &lt;div class="col-lg-4 col-lg-offset-4"&gt;2&lt;/div&gt;  &lt;/div&gt;</code></pre><p>列排序</p><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序。</p><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 列排序 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-4 col-lg-push-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-lg-8 col-lg-pull-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右侧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>响应式工具</p><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或隐藏页面内容。</p><p><img src="./images/04-2.jpg" alt=""></p><h2 id="4-3-阿里百秀案例制作"><a href="#4-3-阿里百秀案例制作" class="headerlink" title="4.3 阿里百秀案例制作"></a>4.3 阿里百秀案例制作</h2><h3 id="4-3-1-技术选型"><a href="#4-3-1-技术选型" class="headerlink" title="4.3.1 技术选型"></a>4.3.1 技术选型</h3><p>方案：我们采取响应式页面开发方案</p><p>技术：bootstrap框架</p><p>设计图： 本设计图采用 1280px 设计尺寸</p><p>项目结构搭建</p><p>Bootstrap 使用四步曲： </p><ol><li>创建文件夹结构</li><li>创建 html 骨架结构  </li><li>引入相关样式文件  </li><li>书写内容 </li></ol><p>container宽度修改</p><p>因为本效果图采取 1280的宽度， 而Bootstrap 里面 container宽度 最大为 1170px，因此我们需要手动改下container宽度</p><pre class=" language-css"><code class="language-css"> <span class="token comment" spellcheck="true">/* 利用媒体查询修改 container宽度适合效果图宽度  */</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>     <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1280</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5css3</title>
      <link href="/2019/05/01/html5css3/"/>
      <url>/2019/05/01/html5css3/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5CSS3"><a href="#HTML5CSS3" class="headerlink" title="HTML5CSS3"></a>HTML5CSS3</h1><h2 id="一、什么是-HTML5"><a href="#一、什么是-HTML5" class="headerlink" title="一、什么是 HTML5"></a>一、什么是 <code>HTML5</code></h2><h3 id="1-HTML5-的概念与定义"><a href="#1-HTML5-的概念与定义" class="headerlink" title="1. HTML5 的概念与定义"></a>1. <code>HTML5</code> 的概念与定义</h3><ul><li>定义：<code>HTML5</code> 定义了 <code>HTML</code> 标准的最新版本，是对 <code>HTML</code> 的第五次重大修改，号称下一代的 <code>HTML</code> </li><li>两个概念：<ul><li>是一个新版本的 <code>HTML</code> 语言，定义了新的标签、特性和属性</li><li>拥有一个强大的技术集，这些技术集是指： <code>HTML5</code> 、<code>CSS3</code> 、<code>javascript</code>, 这也是广义上的 <code>HTML5</code></li></ul></li></ul><h3 id="2-HTML5-拓展了哪些内容"><a href="#2-HTML5-拓展了哪些内容" class="headerlink" title="2. HTML5 拓展了哪些内容"></a>2. <code>HTML5</code> 拓展了哪些内容</h3><ul><li>语义化标签</li><li>本地存储</li><li>兼容特性</li><li><code>2D</code>、<code>3D</code> </li><li>动画、过渡</li><li><code>CSS3</code> 特性</li><li>性能与集成</li></ul><h3 id="3-HTML5-的现状"><a href="#3-HTML5-的现状" class="headerlink" title="3. HTML5 的现状"></a>3. <code>HTML5</code> 的现状</h3><p>绝对多数新的属性，都已经被浏览器所支持，最新版本的浏览器已经开始陆续支持最新的特性，<br>总的来说：<code>HTML5</code> 已经是大势所趋</p><h2 id="二、HTML5-新增标签"><a href="#二、HTML5-新增标签" class="headerlink" title="二、HTML5 新增标签"></a>二、<code>HTML5</code> 新增标签</h2><h3 id="1-什么是语义化"><a href="#1-什么是语义化" class="headerlink" title="1. 什么是语义化"></a>1. 什么是语义化</h3><blockquote><p>用最恰当的标签来标记内容</p></blockquote><h3 id="2-新增了那些语义化标签"><a href="#2-新增了那些语义化标签" class="headerlink" title="2. 新增了那些语义化标签"></a>2. 新增了那些语义化标签</h3><ul><li><code>header</code>   —  头部标签</li><li><code>nav</code>       —  导航标签</li><li><code>article</code> —   内容标签</li><li><code>section</code> —   块级标签</li><li><code>aside</code>    —   侧边栏标签</li><li><code>footer</code>   —   尾部标签</li></ul><img width="80%" src="images\yuyibq.png"><h3 id="3-使用语义化标签的注意"><a href="#3-使用语义化标签的注意" class="headerlink" title="3. 使用语义化标签的注意"></a>3. 使用语义化标签的注意</h3><ul><li>语义化标签主要针对搜索引擎</li><li>新标签可以使用一次或者多次</li><li>在 <code>IE9</code> 浏览器中，需要把语义化标签都转换为块级元素</li><li>语义化标签，在移动端支持比较友好，</li><li>另外，<code>HTML5</code> 新增的了很多的语义化标签，随着课程深入，还会学习到其他的</li></ul><h2 id="三、多媒体音频标签"><a href="#三、多媒体音频标签" class="headerlink" title="三、多媒体音频标签"></a>三、多媒体音频标签</h2><h3 id="1-多媒体标签有两个，分别是"><a href="#1-多媒体标签有两个，分别是" class="headerlink" title="1. 多媒体标签有两个，分别是"></a>1. 多媒体标签有两个，分别是</h3><ul><li>音频  – <code>audio</code></li><li>视频  – <code>video</code></li></ul><h3 id="2-audio-标签说明"><a href="#2-audio-标签说明" class="headerlink" title="2. audio 标签说明"></a>2. <code>audio</code> 标签说明</h3><ul><li>可以在不使用标签的情况下，也能够原生的支持音频格式文件的播放，</li><li>但是：播放格式是有限的</li></ul><h3 id="3-audio-支持的音频格式"><a href="#3-audio-支持的音频格式" class="headerlink" title="3. audio 支持的音频格式"></a>3. audio 支持的音频格式</h3><ul><li>audio 目前支持三种格式</li></ul><img width="80%" src="images\audio.png"><h3 id="4-audio-的参数"><a href="#4-audio-的参数" class="headerlink" title="4. audio 的参数"></a>4. audio 的参数</h3><img width="80%" src="images\audiocanshu.png"><h3 id="5-audio-代码演示"><a href="#5-audio-代码演示" class="headerlink" title="5. audio 代码演示"></a>5. audio 代码演示</h3><pre class=" language-css"><code class="language-css">&lt;body>  &lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 -->  &lt;!-- &lt;audio src=<span class="token string">"./media/snow.mp3"</span> controls autoplay>&lt;/audio> -->  &lt;!--     因为不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件   -->  &lt;audio controls>    &lt;source src=<span class="token string">"./media/snow.mp3"</span> type=<span class="token string">"audio/mpeg"</span> />  &lt;/audio>&lt;/body></code></pre><h2 id="四、多媒体视频标签"><a href="#四、多媒体视频标签" class="headerlink" title="四、多媒体视频标签"></a>四、多媒体视频标签</h2><h3 id="1-video-视频标签"><a href="#1-video-视频标签" class="headerlink" title="1. video 视频标签"></a>1. video 视频标签</h3><ul><li>目前支持三种格式</li></ul><img width="80%" src="images\vedio.png"><h3 id="2-语法格式"><a href="#2-语法格式" class="headerlink" title="2. 语法格式"></a>2. 语法格式</h3><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><h3 id="3-video-参数"><a href="#3-video-参数" class="headerlink" title="3. video 参数"></a>3. video 参数</h3><img width="80%" src="images\videocanshu.png"><h3 id="4-video-代码演示"><a href="#4-video-代码演示" class="headerlink" title="4. video 代码演示"></a>4. video 代码演示</h3><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- &lt;video src="./media/video.mp4" controls="controls">&lt;/video> --></span>     <span class="token comment" spellcheck="true">&lt;!-- 谷歌浏览器禁用了自动播放功能，如果想自动播放，需要添加 muted 属性 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>controls<span class="token punctuation">"</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span> <span class="token attr-name">loop</span> <span class="token attr-name">poster</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/pig.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./media/video.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="5-多媒体标签总结"><a href="#5-多媒体标签总结" class="headerlink" title="5. 多媒体标签总结"></a>5. 多媒体标签总结</h3><ul><li>音频标签与视频标签使用基本一致</li><li>多媒体标签在不同浏览器下情况不同，存在兼容性问题</li><li>谷歌浏览器把音频和视频标签的自动播放都禁止了</li><li>谷歌浏览器中视频添加 muted 标签可以自己播放</li><li>注意：重点记住使用方法以及自动播放即可，其他属性可以在使用时查找对应的手册</li></ul><h2 id="五、新增-input-标签"><a href="#五、新增-input-标签" class="headerlink" title="五、新增 input 标签"></a>五、新增 input 标签</h2><img width="80%" src="images\h5input.png"><h2 id="六、新增表单属性"><a href="#六、新增表单属性" class="headerlink" title="六、新增表单属性"></a>六、新增表单属性</h2><img width="80%" src="images\newinput.png"><h2 id="七、CSS3-属性选择器"><a href="#七、CSS3-属性选择器" class="headerlink" title="七、CSS3 属性选择器"></a>七、<code>CSS3</code> 属性选择器</h2><h3 id="1-什么是-CSS3"><a href="#1-什么是-CSS3" class="headerlink" title="1. 什么是 CSS3"></a>1. 什么是 <code>CSS3</code></h3><p>在 <code>CSS2</code> 的基础上拓展、新增的样式</p><h3 id="2-CSS3-发展现状"><a href="#2-CSS3-发展现状" class="headerlink" title="2. CSS3 发展现状"></a>2. <code>CSS3</code> 发展现状</h3><ul><li>移动端支持优于 <code>PC</code> 端</li><li><code>CSS3</code> 目前还草案，在不断改进中</li><li><code>CSS3</code> 相对 <code>H5</code>，应用非常广泛</li></ul><h3 id="3-属性选择器列表"><a href="#3-属性选择器列表" class="headerlink" title="3. 属性选择器列表"></a>3. 属性选择器列表</h3><img width="80%" src="images\attrcanshu.png"><h3 id="4-属性选择器代码演示1"><a href="#4-属性选择器代码演示1" class="headerlink" title="4. 属性选择器代码演示1"></a>4. 属性选择器代码演示1</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">button </span><span class="token punctuation">{</span>     <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">button<span class="token attribute">[disabled]</span> </span><span class="token punctuation">{</span>     <span class="token property">cursor</span><span class="token punctuation">:</span> default   <span class="token punctuation">}</span></code></pre><h3 id="5-属性选择器代码演示2"><a href="#5-属性选择器代码演示2" class="headerlink" title="5. 属性选择器代码演示2"></a>5. 属性选择器代码演示2</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">input<span class="token attribute">[type=search]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">span<span class="token attribute">[class^=black]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">span<span class="token attribute">[class$=black]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">span<span class="token attribute">[class*=black]</span> </span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="八、结构伪类选择器"><a href="#八、结构伪类选择器" class="headerlink" title="八、结构伪类选择器"></a>八、结构伪类选择器</h2><h3 id="1-属性列表"><a href="#1-属性列表" class="headerlink" title="1. 属性列表"></a>1. 属性列表</h3><img width="80%" src="images\jiegouweilei.png"><h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">ul li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">ul li<span class="token pseudo-class">:last-child</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">ul li<span class="token pseudo-class">:nth-child(3)</span> </span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="九、nth-child-参数详解"><a href="#九、nth-child-参数详解" class="headerlink" title="九、nth-child 参数详解"></a>九、<code>nth-child</code> 参数详解</h2><h3 id="1-nth-child-详解"><a href="#1-nth-child-详解" class="headerlink" title="1. nth-child 详解"></a>1. nth-child 详解</h3><ul><li><p>注意：本质上就是选中第几个子元素</p></li><li><p>n 可以是数字、关键字、公式</p></li><li><p>n 如果是数字，就是选中第几个</p></li><li><p>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</p></li><li><p>常见的公式如下(如果 n 是公式，则从 0 开始计算)</p></li><li><p>但是第 0 个元素或者超出了元素的个数会被忽略</p></li></ul><img width="80%" src="images\nthchildcanshu.png"><h3 id="2-代码演示-1"><a href="#2-代码演示-1" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   &lt;style>     <span class="token comment" spellcheck="true">/* 偶数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(even)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 奇数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(odd)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/*n 是公式，从 0 开始计算 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(n)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 偶数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2n)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 奇数 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(2n + 1)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightsalmon<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* 选择第 0 5 10 15, 应该怎么选 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(5n)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* n + 5 就是从第5个开始往后选择 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(n + 5)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> peru<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/* -n + 5 前五个 */</span>     <span class="token selector">ul li<span class="token pseudo-class">:nth-child(-n + 5)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> tan<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   &lt;/style></code></pre><h2 id="十、nth-child-和-nt-of-type-的区别"><a href="#十、nth-child-和-nt-of-type-的区别" class="headerlink" title="十、nth-child 和  nt-of-type 的区别"></a>十、<code>nth-child</code> 和  <code>nt-of-type</code> 的区别</h2><h3 id="1-代码演示"><a href="#1-代码演示" class="headerlink" title="1. 代码演示"></a>1. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">&lt;style>     div <span class="token pseudo-class">:nth-child(1)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">div <span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightpink<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">div span<span class="token pseudo-class">:nth-of-type(2)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">div span<span class="token pseudo-class">:nth-of-type(3)</span> </span><span class="token punctuation">{</span>       <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   &lt;/style></code></pre><h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h3><ul><li><code>nth-child</code>  选择父元素里面的第几个子元素，不管是第几个类型</li><li><code>nt-of-type</code>  选择指定类型的元素</li></ul><h2 id="十一、伪元素选择器"><a href="#十一、伪元素选择器" class="headerlink" title="十一、伪元素选择器"></a>十一、伪元素选择器</h2><h3 id="1-伪类选择器"><a href="#1-伪类选择器" class="headerlink" title="1. 伪类选择器"></a>1. 伪类选择器</h3><img width="80%" src="images\weiyuansu.png"><h3 id="2-伪类选择器注意事项"><a href="#2-伪类选择器注意事项" class="headerlink" title="2. 伪类选择器注意事项"></a>2. 伪类选择器注意事项</h3><ul><li><code>before</code> 和 <code>after</code> 必须有 <code>content</code> 属性</li><li><code>before</code> 在内容前面，<code>after</code> 在内容后面</li><li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul><h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">&lt;style>       div </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightcoral<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">div<span class="token pseudo-element">::after</span>,       div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'德'</span><span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> lightskyblue<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">div<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'道'</span><span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> mediumaquamarine<span class="token punctuation">;</span>       <span class="token punctuation">}</span>     &lt;/style></code></pre><h3 id="4-案例-添加字体图标"><a href="#4-案例-添加字体图标" class="headerlink" title="4. 案例:添加字体图标"></a>4. 案例:添加字体图标</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">p </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightseagreen<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">p<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>     <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'\ea50'</span><span class="token punctuation">;</span>     <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>     <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>     <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>     <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="十二、2D-转换之-translate"><a href="#十二、2D-转换之-translate" class="headerlink" title="十二、2D 转换之 translate"></a>十二、<code>2D</code> 转换之 <code>translate</code></h2><h3 id="1-2D-转换"><a href="#1-2D-转换" class="headerlink" title="1. 2D 转换"></a>1. <code>2D</code> 转换</h3><ul><li><p><code>2D</code> 转换是改变标签在二维平面上的位置和形状</p></li><li><p>移动： <code>translate</code></p></li><li><p>旋转： <code>rotate</code></p></li><li><p>缩放： <code>scale</code></p></li></ul><h3 id="2-translate-语法"><a href="#2-translate-语法" class="headerlink" title="2. translate 语法"></a>2. <code>translate</code> 语法</h3><ul><li><p>x 就是 x 轴上水平移动</p></li><li><p>y 就是 y 轴上水平移动</p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>x, y<span class="token punctuation">)</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token property">transfrom</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></code></pre></li></ul><h3 id="3-重点知识点"><a href="#3-重点知识点" class="headerlink" title="3. 重点知识点"></a>3. 重点知识点</h3><ul><li><code>2D</code> 的移动主要是指 水平、垂直方向上的移动</li><li><code>translate</code> 最大的优点就是不影响其他元素的位置</li><li><code>translate</code> 中的100%单位，是相对于本身的宽度和高度来进行计算的</li><li>行内标签没有效果</li></ul><h3 id="4-代码演示"><a href="#4-代码演示" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 平移 */</span>  <span class="token comment" spellcheck="true">/* 水平垂直移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translate(100px, 100px); */</span>  <span class="token comment" spellcheck="true">/* 水平移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translate(100px, 0) */</span>  <span class="token comment" spellcheck="true">/* 垂直移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translate(0, 100px) */</span>  <span class="token comment" spellcheck="true">/* 水平移动 100px */</span>  <span class="token comment" spellcheck="true">/* transform: translateX(100px); */</span>  <span class="token comment" spellcheck="true">/* 垂直移动 100px */</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="十三、2D-转换-rotate"><a href="#十三、2D-转换-rotate" class="headerlink" title="十三、2D 转换 rotate"></a>十三、<code>2D 转换 rotate</code></h2><h3 id="1-rotate-旋转"><a href="#1-rotate-旋转" class="headerlink" title="1. rotate 旋转"></a>1. rotate 旋转</h3><ul><li><code>2D</code> 旋转指的是让元素在二维平面内顺时针或者逆时针旋转</li></ul><h3 id="2-rotate-语法"><a href="#2-rotate-语法" class="headerlink" title="2. rotate 语法"></a>2. <code>rotate</code> 语法</h3><pre class=" language-css"><code class="language-css">   <span class="token comment" spellcheck="true">/* 单位是：deg */</span>   <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>度数<span class="token punctuation">)</span> </code></pre><h3 id="3-重点知识点-1"><a href="#3-重点知识点-1" class="headerlink" title="3. 重点知识点"></a>3. 重点知识点</h3><ul><li><code>rotate</code> 里面跟度数，单位是 <code>deg</code></li><li>角度为正时，顺时针，角度为负时，逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><h3 id="4-代码演示-1"><a href="#4-代码演示-1" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h2 id="十四、rotate"><a href="#十四、rotate" class="headerlink" title="十四、rotate"></a>十四、rotate</h2><blockquote><p>2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p></blockquote><p>使用步骤：</p><ol><li>给元素添加转换属性 <code>transform</code></li><li>属性值为 <code>rotate(角度)</code>  如 <code>transform:rotate(30deg)</code>  顺时针方向旋转<strong>30度</strong></li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="十五、设置元素旋转中心点-transform-origin"><a href="#十五、设置元素旋转中心点-transform-origin" class="headerlink" title="十五、设置元素旋转中心点(transform-origin)"></a>十五、设置元素旋转中心点(transform-origin)</h2><h3 id="1-transform-origin-基础语法"><a href="#1-transform-origin-基础语法" class="headerlink" title="1. transform-origin 基础语法"></a>1. <code>transform-origin</code> 基础语法</h3><pre class=" language-css"><code class="language-css">   <span class="token property">transform-origin</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre><h3 id="2-重要知识点"><a href="#2-重要知识点" class="headerlink" title="2. 重要知识点"></a>2. 重要知识点</h3><ul><li>注意后面的参数 x 和 y 用空格隔开</li><li>x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 <code>center</code>  <code>center</code></li><li>还可以给 x y 设置像素或者方位名词(<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>、<code>center</code>)</li></ul><h2 id="十六、2D-转换之-scale"><a href="#十六、2D-转换之-scale" class="headerlink" title="十六、2D 转换之 scale"></a>十六、<code>2D</code> 转换之 <code>scale</code></h2><h3 id="1-scale-的作用"><a href="#1-scale-的作用" class="headerlink" title="1. scale 的作用"></a>1. <code>scale</code> 的作用</h3><p>用来控制元素的放大与缩小</p><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h3><pre class=" language-css"><code class="language-css">   <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>x, y<span class="token punctuation">)</span></code></pre><h3 id="3-知识要点"><a href="#3-知识要点" class="headerlink" title="3. 知识要点"></a>3. 知识要点</h3><ul><li>注意，x 与 y 之间使用逗号进行分隔</li><li><code>transform: scale(1, 1)</code>: 宽高都放大一倍，相当于没有放大</li><li><code>transform: scale(2, 2)</code>: 宽和高都放大了二倍</li><li><code>transform: scale(2)</code>: 如果只写了一个参数，第二个参数就和第一个参数一致</li><li><code>transform:scale(0.5, 0.5)</code>: 缩小</li><li><code>scale</code> 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子</li></ul><h3 id="4-代码演示-2"><a href="#4-代码演示-2" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css">    <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 注意，数字是倍数的含义，所以不需要加单位 */</span>        <span class="token comment" spellcheck="true">/* transform: scale(2, 2) */</span>        <span class="token comment" spellcheck="true">/* 实现等比缩放，同时修改宽与高 */</span>        <span class="token comment" spellcheck="true">/* transform: scale(2) */</span>        <span class="token comment" spellcheck="true">/* 小于 1 就等于缩放*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span>, <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="十七、-2D-转换综合写法以及顺序问题"><a href="#十七、-2D-转换综合写法以及顺序问题" class="headerlink" title="十七、 2D 转换综合写法以及顺序问题"></a>十七、 <code>2D</code> 转换综合写法以及顺序问题</h2><h3 id="1-知识要点"><a href="#1-知识要点" class="headerlink" title="1. 知识要点"></a>1. 知识要点</h3><ul><li>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></li><li>顺序会影响到转换的效果(先旋转会改变坐标轴方向)</li><li>但我们同时有位置或者其他属性的时候，要将位移放到最前面</li></ul><h3 id="2-代码演示-2"><a href="#2-代码演示-2" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">200</span>px, <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h2 id="十八、-动画-animation"><a href="#十八、-动画-animation" class="headerlink" title="十八、 动画(animation)"></a>十八、 动画(animation)</h2><h3 id="1-什么是动画"><a href="#1-什么是动画" class="headerlink" title="1. 什么是动画"></a>1. 什么是动画</h3><p>动画是 <code>CSS3</code> 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果</p><h3 id="2-动画的基本使用"><a href="#2-动画的基本使用" class="headerlink" title="2. 动画的基本使用"></a>2. 动画的基本使用</h3><ul><li>先定义动画</li><li>在调用定义好的动画</li></ul><h3 id="3-语法格式-定义动画"><a href="#3-语法格式-定义动画" class="headerlink" title="3. 语法格式(定义动画)"></a>3. 语法格式(定义动画)</h3><pre class=" language-css"><code class="language-css">   <span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>       <span class="token selector">0% </span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token selector">100% </span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="4-语法格式-使用动画"><a href="#4-语法格式-使用动画" class="headerlink" title="4. 语法格式(使用动画)"></a>4. 语法格式(使用动画)</h3><pre><code>   div {       /* 调用动画 */       animation-name: 动画名称;        /* 持续时间 */        animation-duration: 持续时间；   }</code></pre><h3 id="5-动画序列"><a href="#5-动画序列" class="headerlink" title="5. 动画序列"></a>5. 动画序列</h3><ul><li>0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列</li><li>在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数</li><li>用百分比来规定变化发生的时间，或用 <code>from</code> 和 <code>to</code>，等同于 0% 和 100%</li></ul><h3 id="6-代码演示"><a href="#6-代码演示" class="headerlink" title="6. 代码演示"></a>6. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">&lt;style>       div </span><span class="token punctuation">{</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>         <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>         <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">0.5</span>s<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token atrule"><span class="token rule">@keyframes</span> move</span><span class="token punctuation">{</span>         <span class="token selector">0% </span><span class="token punctuation">{</span>           <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span>         <span class="token punctuation">}</span>         <span class="token selector">100% </span><span class="token punctuation">{</span>           <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">500</span>px, <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     &lt;/style></code></pre><h2 id="十九、动画常见属性"><a href="#十九、动画常见属性" class="headerlink" title="十九、动画常见属性"></a>十九、动画常见属性</h2><h3 id="1-常见的属性"><a href="#1-常见的属性" class="headerlink" title="1. 常见的属性"></a>1. 常见的属性</h3><img width="80%" src="images\animationcanshu.png"><p>   ​</p><h3 id="2-代码演示-3"><a href="#2-代码演示-3" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画名称 */</span>     <span class="token property">animation-name</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画花费时长 */</span>     <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画速度曲线 */</span>     <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-in-out<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画等待多长时间执行 */</span>     <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 规定动画播放次数 infinite: 无限循环 */</span>     <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 是否逆行播放 */</span>     <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 动画结束之后的状态 */</span>     <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* 规定动画是否暂停或者播放 */</span>     <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="二十、-动画简写方式"><a href="#二十、-动画简写方式" class="headerlink" title="二十、 动画简写方式"></a>二十、 动画简写方式</h2><h3 id="1-动画简写方式"><a href="#1-动画简写方式" class="headerlink" title="1. 动画简写方式"></a>1. 动画简写方式</h3><pre class=" language-css"><code class="language-css">   <span class="token comment" spellcheck="true">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span>   <span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction fill-mode</code></pre><h3 id="2-知识要点"><a href="#2-知识要点" class="headerlink" title="2. 知识要点"></a>2. 知识要点</h3><ul><li>简写属性里面不包含 <code>animation-paly-state</code></li><li>暂停动画 <code>animation-paly-state: paused</code>; 经常和鼠标经过等其他配合使用</li><li>要想动画走回来，而不是直接调回来：<code>animation-direction: alternate</code></li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code> </li></ul><h3 id="3-代码演示-1"><a href="#3-代码演示-1" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token property">animation</span><span class="token punctuation">:</span> move <span class="token number">2</span>s linear <span class="token number">1</span>s infinite alternate forwards<span class="token punctuation">;</span></code></pre><h2 id="二十一、速度曲线细节"><a href="#二十一、速度曲线细节" class="headerlink" title="二十一、速度曲线细节"></a>二十一、速度曲线细节</h2><h3 id="1-速度曲线细节"><a href="#1-速度曲线细节" class="headerlink" title="1. 速度曲线细节"></a>1. 速度曲线细节</h3><ul><li><code>animation-timing-function</code>: 规定动画的速度曲线，默认是<code>ease</code></li></ul><img width="80%" src="images\steps.png"><h3 id="2-代码演示-4"><a href="#2-代码演示-4" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>     <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>     <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>     <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>     <span class="token property">animation</span><span class="token punctuation">:</span> move <span class="token number">4</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> forwards<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>     <span class="token selector">0% </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token selector">100% </span><span class="token punctuation">{</span>       <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">480</span>px<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="3-案例：奔跑的熊大"><a href="#3-案例：奔跑的熊大" class="headerlink" title="3. 案例：奔跑的熊大"></a>3. 案例：奔跑的熊大</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>              <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(media/bear.png)</span> no-repeat<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 我们元素可以添加多个动画， 用逗号分隔 */</span>            <span class="token property">animation</span><span class="token punctuation">:</span> bear <span class="token number">.4</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> infinite, move <span class="token number">3</span>s forwards<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@keyframes</span> bear</span> <span class="token punctuation">{</span>            <span class="token selector">0% </span><span class="token punctuation">{</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">1600</span>px <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">{</span>            <span class="token selector">0% </span><span class="token punctuation">{</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* margin-left: -100px; */</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="二十二、-认识-3D-转换"><a href="#二十二、-认识-3D-转换" class="headerlink" title="二十二、 认识 3D 转换"></a>二十二、 认识 <code>3D</code> 转换</h2><h3 id="1-3D-的特点"><a href="#1-3D-的特点" class="headerlink" title="1. 3D 的特点"></a>1. <code>3D</code> 的特点</h3><ul><li><p>近大远小</p></li><li><p>物体和面遮挡不可见</p><h3 id="2-三维坐标系"><a href="#2-三维坐标系" class="headerlink" title="2. 三维坐标系"></a>2. 三维坐标系</h3></li><li><p>x 轴：水平向右  – <strong>注意：x 轴右边是正值，左边是负值</strong></p></li><li><p>y 轴：垂直向下  – <strong>注意：y 轴下面是正值，上面是负值</strong></p></li><li><p>z 轴：垂直屏幕  –  <strong>注意：往外边的是正值，往里面的是负值</strong></p></li></ul><img width="80%" src="images\sanwei.png"><h2 id="二十三、3D-转换"><a href="#二十三、3D-转换" class="headerlink" title="二十三、3D 转换"></a>二十三、<code>3D</code> 转换</h2><h3 id="1-3D-转换知识要点"><a href="#1-3D-转换知识要点" class="headerlink" title="1. 3D 转换知识要点"></a>1. <code>3D</code> 转换知识要点</h3><ul><li><code>3D</code> 位移：<code>translate3d(x, y, z)</code></li><li><code>3D</code> 旋转：<code>rotate3d(x, y, z)</code></li><li>透视：<code>perspctive</code></li><li><code>3D</code>呈现 <code>transfrom-style</code></li></ul><h3 id="2-3D-移动-translate3d"><a href="#2-3D-移动-translate3d" class="headerlink" title="2. 3D 移动 translate3d"></a>2. <code>3D</code> 移动 <code>translate3d</code></h3><ul><li><code>3D</code> 移动就是在 <code>2D</code> 移动的基础上多加了一个可以移动的方向，就是 z 轴方向</li><li><code>transform: translateX(100px)</code>：仅仅是在 x 轴上移动</li><li><code>transform: translateY(100px)</code>：仅仅是在 y 轴上移动</li><li><code>transform: translateZ(100px)</code>：仅仅是在 z 轴上移动</li><li><code>transform: translate3d(x, y, z)</code>：其中x、y、z 分别指要移动的轴的方向的距离</li><li><strong>注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充</strong></li></ul><h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3. 语法"></a>3. 语法</h3><pre class=" language-css"><code class="language-css">    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>x, y, z<span class="token punctuation">)</span></code></pre><h3 id="4-代码演示-3"><a href="#4-代码演示-3" class="headerlink" title="4. 代码演示"></a>4. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">100</span>px, <span class="token number">100</span>px, <span class="token number">100</span>px<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */</span>   <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">100</span>px, <span class="token number">100</span>px, <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="二十四、透视-perspective"><a href="#二十四、透视-perspective" class="headerlink" title="二十四、透视 perspective"></a>二十四、透视 <code>perspective</code></h2><h3 id="1-知识点讲解"><a href="#1-知识点讲解" class="headerlink" title="1. 知识点讲解"></a>1. 知识点讲解</h3><ul><li>如果想要网页产生 <code>3D</code> 效果需要透视(理解成 <code>3D</code> 物体投影的 <code>2D</code> 平面上)</li><li>实际上模仿人类的视觉位置，可视为安排一直眼睛去看</li><li>透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是像素</li></ul><h3 id="2-知识要点-1"><a href="#2-知识要点-1" class="headerlink" title="2. 知识要点"></a>2. 知识要点</h3><ul><li><p><strong>透视需要写在被视察元素的父盒子上面</strong></p></li><li><p>注意下方图片</p><ul><li><p>d：就是视距，视距就是指人的眼睛到屏幕的距离</p></li><li><p>z：就是 z 轴，z 轴越大(正值)，我们看到的物体就越大</p></li></ul></li></ul><img width="80%" src="images\perspective.png"><p>   ​            </p><h3 id="3-代码演示-2"><a href="#3-代码演示-2" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">body </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="二十五、-translateZ"><a href="#二十五、-translateZ" class="headerlink" title="二十五、 translateZ"></a>二十五、 <code>translateZ</code></h2><h3 id="1-translateZ-与-perspecitve-的区别"><a href="#1-translateZ-与-perspecitve-的区别" class="headerlink" title="1. translateZ 与 perspecitve 的区别"></a>1. <code>translateZ</code> 与 <code>perspecitve</code> 的区别</h3><p><code>perspecitve</code> 给父级进行设置，<code>translateZ</code> 给 子元素进行设置不同的大小</p><h2 id="二十六、3D-旋转rotateX"><a href="#二十六、3D-旋转rotateX" class="headerlink" title="二十六、3D 旋转rotateX"></a>二十六、<code>3D</code> 旋转<code>rotateX</code></h2><blockquote><p>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转</p></blockquote><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><ul><li><code>transform: rotateX(45deg)</code> – 沿着 x 轴正方向旋转 45 度</li><li><code>transform: rotateY(45deg)</code> – 沿着 y 轴正方向旋转 45 度</li><li><code>transform: rotateZ(45deg)</code> – 沿着 z 轴正方向旋转 45 度</li><li><code>transform: rotate3d(x, y, z, 45deg)</code> – 沿着自定义轴旋转 45 deg 为角度</li></ul><h3 id="2-代码案例"><a href="#2-代码案例" class="headerlink" title="2. 代码案例"></a>2. 代码案例</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h3 id="3-左手准则"><a href="#3-左手准则" class="headerlink" title="3. 左手准则"></a>3. 左手准则</h3><ul><li><p>左手的手拇指指向 x 轴的正方向</p></li><li><p>其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</p></li></ul><img width="80%" src="images\rotateX.png"><p>​              </p><h2 id="二十七、3D-旋转-rotateY"><a href="#二十七、3D-旋转-rotateY" class="headerlink" title="二十七、3D 旋转 rotateY"></a>二十七、<code>3D</code> 旋转 <code>rotateY</code></h2><h3 id="1-代码演示-1"><a href="#1-代码演示-1" class="headerlink" title="1. 代码演示"></a>1. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h3 id="2-左手准则"><a href="#2-左手准则" class="headerlink" title="2. 左手准则"></a>2. 左手准则</h3><ul><li><p>左手的拇指指向 y 轴的正方向</p></li><li><p>其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值)</p></li></ul><img width="80%" src="images\rotateY.png"><pre><code> ​</code></pre><h2 id="二十八、-3D-旋转-rotateZ"><a href="#二十八、-3D-旋转-rotateZ" class="headerlink" title="二十八、 3D 旋转 rotateZ"></a>二十八、 <code>3D</code> 旋转 <code>rotateZ</code></h2><h3 id="1-代码演示-2"><a href="#1-代码演示-2" class="headerlink" title="1. 代码演示"></a>1. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h3 id="2-rotate3d"><a href="#2-rotate3d" class="headerlink" title="2. rotate3d"></a>2. <code>rotate3d</code></h3><ul><li><code>transform: rotate3d(x, y, z, deg)</code> – 沿着自定义轴旋转 deg 为角度</li><li>x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度<ul><li><code>transform: rotate3d(1, 1, 0, 180deg)</code> – 沿着对角线旋转 45deg</li><li><code>transform: rotate3d(1, 0, 0, 180deg)</code> – 沿着 x 轴旋转 45deg</li></ul></li></ul><h3 id="3-代码演示-3"><a href="#3-代码演示-3" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><pre class=" language-css"><code class="language-css">   <span class="token selector">div </span><span class="token punctuation">{</span>     <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img </span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>     <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>     <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>     <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">1</span>, <span class="token number">0</span>, <span class="token number">180</span>deg<span class="token punctuation">)</span>   <span class="token punctuation">}</span></code></pre><h2 id="二十九、3D-呈现-transform-style"><a href="#二十九、3D-呈现-transform-style" class="headerlink" title="二十九、3D 呈现 transform-style"></a>二十九、<code>3D</code> 呈现 <code>transform-style</code></h2><ul><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code>  代表子元素不开启 <code>3D</code> 立体空间，默认的</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
